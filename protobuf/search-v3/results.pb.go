// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protobuf/search-v3/results.proto

package search_v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TermSource int32

const (
	TermSource_GATE                TermSource = 0
	TermSource_ROUTE_TARGETING     TermSource = 1
	TermSource_FACE_CODE_TARGETING TermSource = 2
	TermSource_AIRLINE_DEFAULT     TermSource = 3
	TermSource_DEFAULT             TermSource = 4
)

// Enum value maps for TermSource.
var (
	TermSource_name = map[int32]string{
		0: "GATE",
		1: "ROUTE_TARGETING",
		2: "FACE_CODE_TARGETING",
		3: "AIRLINE_DEFAULT",
		4: "DEFAULT",
	}
	TermSource_value = map[string]int32{
		"GATE":                0,
		"ROUTE_TARGETING":     1,
		"FACE_CODE_TARGETING": 2,
		"AIRLINE_DEFAULT":     3,
		"DEFAULT":             4,
	}
)

func (x TermSource) Enum() *TermSource {
	p := new(TermSource)
	*p = x
	return p
}

func (x TermSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TermSource) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[0].Descriptor()
}

func (TermSource) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[0]
}

func (x TermSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TermSource.Descriptor instead.
func (TermSource) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{0}
}

type EquipmentType int32

const (
	EquipmentType_UNKNOWN EquipmentType = 0
	EquipmentType_PLANE   EquipmentType = 1
	EquipmentType_TRAIN   EquipmentType = 2
	EquipmentType_BUS     EquipmentType = 3
	EquipmentType_BOAT    EquipmentType = 4
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PLANE",
		2: "TRAIN",
		3: "BUS",
		4: "BOAT",
	}
	EquipmentType_value = map[string]int32{
		"UNKNOWN": 0,
		"PLANE":   1,
		"TRAIN":   2,
		"BUS":     3,
		"BOAT":    4,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[1].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[1]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{1}
}

type SourceKind int32

const (
	SourceKind_OTHER       SourceKind = 0
	SourceKind_WEB         SourceKind = 1
	SourceKind_MOBILE      SourceKind = 2
	SourceKind_MOBILE_WEB  SourceKind = 3
	SourceKind_WHITE_LABEL SourceKind = 4
	SourceKind_TP_API      SourceKind = 5
	SourceKind_B2B_WEB     SourceKind = 6
)

// Enum value maps for SourceKind.
var (
	SourceKind_name = map[int32]string{
		0: "OTHER",
		1: "WEB",
		2: "MOBILE",
		3: "MOBILE_WEB",
		4: "WHITE_LABEL",
		5: "TP_API",
		6: "B2B_WEB",
	}
	SourceKind_value = map[string]int32{
		"OTHER":       0,
		"WEB":         1,
		"MOBILE":      2,
		"MOBILE_WEB":  3,
		"WHITE_LABEL": 4,
		"TP_API":      5,
		"B2B_WEB":     6,
	}
)

func (x SourceKind) Enum() *SourceKind {
	p := new(SourceKind)
	*p = x
	return p
}

func (x SourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[2].Descriptor()
}

func (SourceKind) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[2]
}

func (x SourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceKind.Descriptor instead.
func (SourceKind) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{2}
}

type Order int32

const (
	Order_BEST              Order = 0
	Order_CHEAPEST          Order = 1
	Order_DEPARTURE_TIME    Order = 2
	Order_ARRIVAL_TIME      Order = 3
	Order_TRANSFER_DURATION Order = 4
	Order_TRIP_DURATION     Order = 5
	Order_RATING            Order = 6
	Order_POPULARITY        Order = 7
	Order_BEST_SCORING      Order = 8
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "BEST",
		1: "CHEAPEST",
		2: "DEPARTURE_TIME",
		3: "ARRIVAL_TIME",
		4: "TRANSFER_DURATION",
		5: "TRIP_DURATION",
		6: "RATING",
		7: "POPULARITY",
		8: "BEST_SCORING",
	}
	Order_value = map[string]int32{
		"BEST":              0,
		"CHEAPEST":          1,
		"DEPARTURE_TIME":    2,
		"ARRIVAL_TIME":      3,
		"TRANSFER_DURATION": 4,
		"TRIP_DURATION":     5,
		"RATING":            6,
		"POPULARITY":        7,
		"BEST_SCORING":      8,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[3].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[3]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{3}
}

type Brand int32

const (
	Brand_AS Brand = 0
	Brand_WA Brand = 1
)

// Enum value maps for Brand.
var (
	Brand_name = map[int32]string{
		0: "AS",
		1: "WA",
	}
	Brand_value = map[string]int32{
		"AS": 0,
		"WA": 1,
	}
)

func (x Brand) Enum() *Brand {
	p := new(Brand)
	*p = x
	return p
}

func (x Brand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Brand) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[4].Descriptor()
}

func (Brand) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[4]
}

func (x Brand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Brand.Descriptor instead.
func (Brand) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{4}
}

type Currency int32

const (
	Currency_ADP Currency = 0
	Currency_AED Currency = 1
	Currency_AFA Currency = 2
	Currency_AFN Currency = 3
	Currency_ALK Currency = 4
	Currency_ALL Currency = 5
	Currency_AMD Currency = 6
	Currency_ANG Currency = 7
	Currency_AOA Currency = 8
	Currency_AOK Currency = 9
	Currency_AON Currency = 10
	Currency_AOR Currency = 11
	Currency_ARA Currency = 12
	Currency_ARL Currency = 13
	Currency_ARM Currency = 14
	Currency_ARP Currency = 15
	Currency_ARS Currency = 16
	Currency_ATS Currency = 17
	Currency_AUD Currency = 18
	Currency_AWG Currency = 19
	Currency_AZM Currency = 20
	Currency_AZN Currency = 21
	Currency_BAD Currency = 22
	Currency_BAM Currency = 23
	Currency_BAN Currency = 24
	Currency_BBD Currency = 25
	Currency_BDT Currency = 26
	Currency_BEC Currency = 27
	Currency_BEF Currency = 28
	Currency_BEL Currency = 29
	Currency_BGL Currency = 30
	Currency_BGM Currency = 31
	Currency_BGN Currency = 32
	Currency_BGO Currency = 33
	Currency_BHD Currency = 34
	Currency_BIF Currency = 35
	Currency_BMD Currency = 36
	Currency_BND Currency = 37
	Currency_BOB Currency = 38
	Currency_BOL Currency = 39
	Currency_BOP Currency = 40
	Currency_BOV Currency = 41
	Currency_BRB Currency = 42
	Currency_BRC Currency = 43
	Currency_BRE Currency = 44
	Currency_BRL Currency = 45
	Currency_BRN Currency = 46
	Currency_BRR Currency = 47
	Currency_BRZ Currency = 48
	Currency_BSD Currency = 49
	Currency_BTN Currency = 50
	Currency_BUK Currency = 51
	Currency_BWP Currency = 52
	Currency_BYB Currency = 53
	Currency_BYN Currency = 54
	Currency_BYR Currency = 55
	Currency_BZD Currency = 56
	Currency_CAD Currency = 57
	Currency_CDF Currency = 58
	Currency_CHE Currency = 59
	Currency_CHF Currency = 60
	Currency_CHW Currency = 61
	Currency_CLE Currency = 62
	Currency_CLF Currency = 63
	Currency_CLP Currency = 64
	Currency_CNH Currency = 65
	Currency_CNX Currency = 66
	Currency_CNY Currency = 67
	Currency_COP Currency = 68
	Currency_COU Currency = 69
	Currency_CRC Currency = 70
	Currency_CSD Currency = 71
	Currency_CSK Currency = 72
	Currency_CUC Currency = 73
	Currency_CUP Currency = 74
	Currency_CVE Currency = 75
	Currency_CYP Currency = 76
	Currency_CZK Currency = 77
	Currency_DDM Currency = 78
	Currency_DEM Currency = 79
	Currency_DJF Currency = 80
	Currency_DKK Currency = 81
	Currency_DOP Currency = 82
	Currency_DZD Currency = 83
	Currency_ECS Currency = 84
	Currency_ECV Currency = 85
	Currency_EEK Currency = 86
	Currency_EGP Currency = 87
	Currency_ERN Currency = 88
	Currency_ESA Currency = 89
	Currency_ESB Currency = 90
	Currency_ESP Currency = 91
	Currency_ETB Currency = 92
	Currency_EUR Currency = 93
	Currency_FIM Currency = 94
	Currency_FJD Currency = 95
	Currency_FKP Currency = 96
	Currency_FRF Currency = 97
	Currency_GBP Currency = 98
	Currency_GEK Currency = 99
	Currency_GEL Currency = 100
	Currency_GHC Currency = 101
	Currency_GHS Currency = 102
	Currency_GIP Currency = 103
	Currency_GMD Currency = 104
	Currency_GNF Currency = 105
	Currency_GNS Currency = 106
	Currency_GQE Currency = 107
	Currency_GRD Currency = 108
	Currency_GTQ Currency = 109
	Currency_GWE Currency = 110
	Currency_GWP Currency = 111
	Currency_GYD Currency = 112
	Currency_HKD Currency = 113
	Currency_HNL Currency = 114
	Currency_HRD Currency = 115
	Currency_HRK Currency = 116
	Currency_HTG Currency = 117
	Currency_HUF Currency = 118
	Currency_IDR Currency = 119
	Currency_IEP Currency = 120
	Currency_ILP Currency = 121
	Currency_ILR Currency = 122
	Currency_ILS Currency = 123
	Currency_INR Currency = 124
	Currency_IQD Currency = 125
	Currency_IRR Currency = 126
	Currency_ISJ Currency = 127
	Currency_ISK Currency = 128
	Currency_ITL Currency = 129
	Currency_JMD Currency = 130
	Currency_JOD Currency = 131
	Currency_JPY Currency = 132
	Currency_KES Currency = 133
	Currency_KGS Currency = 134
	Currency_KHR Currency = 135
	Currency_KMF Currency = 136
	Currency_KPW Currency = 137
	Currency_KRH Currency = 138
	Currency_KRO Currency = 139
	Currency_KRW Currency = 140
	Currency_KWD Currency = 141
	Currency_KYD Currency = 142
	Currency_KZT Currency = 143
	Currency_LAK Currency = 144
	Currency_LBP Currency = 145
	Currency_LKR Currency = 146
	Currency_LRD Currency = 147
	Currency_LSL Currency = 148
	Currency_LTL Currency = 149
	Currency_LTT Currency = 150
	Currency_LUC Currency = 151
	Currency_LUF Currency = 152
	Currency_LUL Currency = 153
	Currency_LVL Currency = 154
	Currency_LVR Currency = 155
	Currency_LYD Currency = 156
	Currency_MAD Currency = 157
	Currency_MAF Currency = 158
	Currency_MCF Currency = 159
	Currency_MDC Currency = 160
	Currency_MDL Currency = 161
	Currency_MGA Currency = 162
	Currency_MGF Currency = 163
	Currency_MKD Currency = 164
	Currency_MKN Currency = 165
	Currency_MLF Currency = 166
	Currency_MMK Currency = 167
	Currency_MNT Currency = 168
	Currency_MOP Currency = 169
	Currency_MRO Currency = 170
	Currency_MTL Currency = 171
	Currency_MTP Currency = 172
	Currency_MUR Currency = 173
	Currency_MVP Currency = 174
	Currency_MVR Currency = 175
	Currency_MWK Currency = 176
	Currency_MXN Currency = 177
	Currency_MXP Currency = 178
	Currency_MXV Currency = 179
	Currency_MYR Currency = 180
	Currency_MZE Currency = 181
	Currency_MZM Currency = 182
	Currency_MZN Currency = 183
	Currency_NAD Currency = 184
	Currency_NGN Currency = 185
	Currency_NIC Currency = 186
	Currency_NIO Currency = 187
	Currency_NLG Currency = 188
	Currency_NOK Currency = 189
	Currency_NPR Currency = 190
	Currency_NZD Currency = 191
	Currency_OMR Currency = 192
	Currency_PAB Currency = 193
	Currency_PEI Currency = 194
	Currency_PEN Currency = 195
	Currency_PES Currency = 196
	Currency_PGK Currency = 197
	Currency_PHP Currency = 198
	Currency_PKR Currency = 199
	Currency_PLN Currency = 200
	Currency_PLZ Currency = 201
	Currency_PTE Currency = 202
	Currency_PYG Currency = 203
	Currency_QAR Currency = 204
	Currency_RHD Currency = 205
	Currency_ROL Currency = 206
	Currency_RON Currency = 207
	Currency_RSD Currency = 208
	Currency_RUB Currency = 209
	Currency_RUR Currency = 210
	Currency_RWF Currency = 211
	Currency_SAR Currency = 212
	Currency_SBD Currency = 213
	Currency_SCR Currency = 214
	Currency_SDD Currency = 215
	Currency_SDG Currency = 216
	Currency_SDP Currency = 217
	Currency_SEK Currency = 218
	Currency_SGD Currency = 219
	Currency_SHP Currency = 220
	Currency_SIT Currency = 221
	Currency_SKK Currency = 222
	Currency_SLL Currency = 223
	Currency_SOS Currency = 224
	Currency_SRD Currency = 225
	Currency_SRG Currency = 226
	Currency_SSP Currency = 227
	Currency_STD Currency = 228
	Currency_STN Currency = 229
	Currency_SUR Currency = 230
	Currency_SVC Currency = 231
	Currency_SYP Currency = 232
	Currency_SZL Currency = 233
	Currency_THB Currency = 234
	Currency_TJR Currency = 235
	Currency_TJS Currency = 236
	Currency_TMM Currency = 237
	Currency_TMT Currency = 238
	Currency_TND Currency = 239
	Currency_TOP Currency = 240
	Currency_TPE Currency = 241
	Currency_TRL Currency = 242
	Currency_TRY Currency = 243
	Currency_TTD Currency = 244
	Currency_TWD Currency = 245
	Currency_TZS Currency = 246
	Currency_UAH Currency = 247
	Currency_UAK Currency = 248
	Currency_UGS Currency = 249
	Currency_UGX Currency = 250
	Currency_USD Currency = 251
	Currency_USN Currency = 252
	Currency_USS Currency = 253
	Currency_UYI Currency = 254
	Currency_UYP Currency = 255
	Currency_UYU Currency = 256
	Currency_UZS Currency = 257
	Currency_VEB Currency = 258
	Currency_VEF Currency = 259
	Currency_VND Currency = 260
	Currency_VNN Currency = 261
	Currency_VUV Currency = 262
	Currency_WST Currency = 263
	Currency_XAF Currency = 264
	Currency_XAG Currency = 265
	Currency_XAU Currency = 266
	Currency_XBA Currency = 267
	Currency_XBB Currency = 268
	Currency_XBC Currency = 269
	Currency_XBD Currency = 270
	Currency_XCD Currency = 271
	Currency_XDR Currency = 272
	Currency_XEU Currency = 273
	Currency_XFO Currency = 274
	Currency_XFU Currency = 275
	Currency_XOF Currency = 276
	Currency_XPD Currency = 277
	Currency_XPF Currency = 278
	Currency_XPT Currency = 279
	Currency_XRE Currency = 280
	Currency_XSU Currency = 281
	Currency_XTS Currency = 282
	Currency_XUA Currency = 283
	Currency_XXX Currency = 284
	Currency_YDD Currency = 285
	Currency_YER Currency = 286
	Currency_YUD Currency = 287
	Currency_YUM Currency = 288
	Currency_YUN Currency = 289
	Currency_YUR Currency = 290
	Currency_ZAL Currency = 291
	Currency_ZAR Currency = 292
	Currency_ZMK Currency = 293
	Currency_ZMW Currency = 294
	Currency_ZRN Currency = 295
	Currency_ZRZ Currency = 296
	Currency_ZWD Currency = 297
	Currency_ZWL Currency = 298
	Currency_ZWR Currency = 299
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0:   "ADP",
		1:   "AED",
		2:   "AFA",
		3:   "AFN",
		4:   "ALK",
		5:   "ALL",
		6:   "AMD",
		7:   "ANG",
		8:   "AOA",
		9:   "AOK",
		10:  "AON",
		11:  "AOR",
		12:  "ARA",
		13:  "ARL",
		14:  "ARM",
		15:  "ARP",
		16:  "ARS",
		17:  "ATS",
		18:  "AUD",
		19:  "AWG",
		20:  "AZM",
		21:  "AZN",
		22:  "BAD",
		23:  "BAM",
		24:  "BAN",
		25:  "BBD",
		26:  "BDT",
		27:  "BEC",
		28:  "BEF",
		29:  "BEL",
		30:  "BGL",
		31:  "BGM",
		32:  "BGN",
		33:  "BGO",
		34:  "BHD",
		35:  "BIF",
		36:  "BMD",
		37:  "BND",
		38:  "BOB",
		39:  "BOL",
		40:  "BOP",
		41:  "BOV",
		42:  "BRB",
		43:  "BRC",
		44:  "BRE",
		45:  "BRL",
		46:  "BRN",
		47:  "BRR",
		48:  "BRZ",
		49:  "BSD",
		50:  "BTN",
		51:  "BUK",
		52:  "BWP",
		53:  "BYB",
		54:  "BYN",
		55:  "BYR",
		56:  "BZD",
		57:  "CAD",
		58:  "CDF",
		59:  "CHE",
		60:  "CHF",
		61:  "CHW",
		62:  "CLE",
		63:  "CLF",
		64:  "CLP",
		65:  "CNH",
		66:  "CNX",
		67:  "CNY",
		68:  "COP",
		69:  "COU",
		70:  "CRC",
		71:  "CSD",
		72:  "CSK",
		73:  "CUC",
		74:  "CUP",
		75:  "CVE",
		76:  "CYP",
		77:  "CZK",
		78:  "DDM",
		79:  "DEM",
		80:  "DJF",
		81:  "DKK",
		82:  "DOP",
		83:  "DZD",
		84:  "ECS",
		85:  "ECV",
		86:  "EEK",
		87:  "EGP",
		88:  "ERN",
		89:  "ESA",
		90:  "ESB",
		91:  "ESP",
		92:  "ETB",
		93:  "EUR",
		94:  "FIM",
		95:  "FJD",
		96:  "FKP",
		97:  "FRF",
		98:  "GBP",
		99:  "GEK",
		100: "GEL",
		101: "GHC",
		102: "GHS",
		103: "GIP",
		104: "GMD",
		105: "GNF",
		106: "GNS",
		107: "GQE",
		108: "GRD",
		109: "GTQ",
		110: "GWE",
		111: "GWP",
		112: "GYD",
		113: "HKD",
		114: "HNL",
		115: "HRD",
		116: "HRK",
		117: "HTG",
		118: "HUF",
		119: "IDR",
		120: "IEP",
		121: "ILP",
		122: "ILR",
		123: "ILS",
		124: "INR",
		125: "IQD",
		126: "IRR",
		127: "ISJ",
		128: "ISK",
		129: "ITL",
		130: "JMD",
		131: "JOD",
		132: "JPY",
		133: "KES",
		134: "KGS",
		135: "KHR",
		136: "KMF",
		137: "KPW",
		138: "KRH",
		139: "KRO",
		140: "KRW",
		141: "KWD",
		142: "KYD",
		143: "KZT",
		144: "LAK",
		145: "LBP",
		146: "LKR",
		147: "LRD",
		148: "LSL",
		149: "LTL",
		150: "LTT",
		151: "LUC",
		152: "LUF",
		153: "LUL",
		154: "LVL",
		155: "LVR",
		156: "LYD",
		157: "MAD",
		158: "MAF",
		159: "MCF",
		160: "MDC",
		161: "MDL",
		162: "MGA",
		163: "MGF",
		164: "MKD",
		165: "MKN",
		166: "MLF",
		167: "MMK",
		168: "MNT",
		169: "MOP",
		170: "MRO",
		171: "MTL",
		172: "MTP",
		173: "MUR",
		174: "MVP",
		175: "MVR",
		176: "MWK",
		177: "MXN",
		178: "MXP",
		179: "MXV",
		180: "MYR",
		181: "MZE",
		182: "MZM",
		183: "MZN",
		184: "NAD",
		185: "NGN",
		186: "NIC",
		187: "NIO",
		188: "NLG",
		189: "NOK",
		190: "NPR",
		191: "NZD",
		192: "OMR",
		193: "PAB",
		194: "PEI",
		195: "PEN",
		196: "PES",
		197: "PGK",
		198: "PHP",
		199: "PKR",
		200: "PLN",
		201: "PLZ",
		202: "PTE",
		203: "PYG",
		204: "QAR",
		205: "RHD",
		206: "ROL",
		207: "RON",
		208: "RSD",
		209: "RUB",
		210: "RUR",
		211: "RWF",
		212: "SAR",
		213: "SBD",
		214: "SCR",
		215: "SDD",
		216: "SDG",
		217: "SDP",
		218: "SEK",
		219: "SGD",
		220: "SHP",
		221: "SIT",
		222: "SKK",
		223: "SLL",
		224: "SOS",
		225: "SRD",
		226: "SRG",
		227: "SSP",
		228: "STD",
		229: "STN",
		230: "SUR",
		231: "SVC",
		232: "SYP",
		233: "SZL",
		234: "THB",
		235: "TJR",
		236: "TJS",
		237: "TMM",
		238: "TMT",
		239: "TND",
		240: "TOP",
		241: "TPE",
		242: "TRL",
		243: "TRY",
		244: "TTD",
		245: "TWD",
		246: "TZS",
		247: "UAH",
		248: "UAK",
		249: "UGS",
		250: "UGX",
		251: "USD",
		252: "USN",
		253: "USS",
		254: "UYI",
		255: "UYP",
		256: "UYU",
		257: "UZS",
		258: "VEB",
		259: "VEF",
		260: "VND",
		261: "VNN",
		262: "VUV",
		263: "WST",
		264: "XAF",
		265: "XAG",
		266: "XAU",
		267: "XBA",
		268: "XBB",
		269: "XBC",
		270: "XBD",
		271: "XCD",
		272: "XDR",
		273: "XEU",
		274: "XFO",
		275: "XFU",
		276: "XOF",
		277: "XPD",
		278: "XPF",
		279: "XPT",
		280: "XRE",
		281: "XSU",
		282: "XTS",
		283: "XUA",
		284: "XXX",
		285: "YDD",
		286: "YER",
		287: "YUD",
		288: "YUM",
		289: "YUN",
		290: "YUR",
		291: "ZAL",
		292: "ZAR",
		293: "ZMK",
		294: "ZMW",
		295: "ZRN",
		296: "ZRZ",
		297: "ZWD",
		298: "ZWL",
		299: "ZWR",
	}
	Currency_value = map[string]int32{
		"ADP": 0,
		"AED": 1,
		"AFA": 2,
		"AFN": 3,
		"ALK": 4,
		"ALL": 5,
		"AMD": 6,
		"ANG": 7,
		"AOA": 8,
		"AOK": 9,
		"AON": 10,
		"AOR": 11,
		"ARA": 12,
		"ARL": 13,
		"ARM": 14,
		"ARP": 15,
		"ARS": 16,
		"ATS": 17,
		"AUD": 18,
		"AWG": 19,
		"AZM": 20,
		"AZN": 21,
		"BAD": 22,
		"BAM": 23,
		"BAN": 24,
		"BBD": 25,
		"BDT": 26,
		"BEC": 27,
		"BEF": 28,
		"BEL": 29,
		"BGL": 30,
		"BGM": 31,
		"BGN": 32,
		"BGO": 33,
		"BHD": 34,
		"BIF": 35,
		"BMD": 36,
		"BND": 37,
		"BOB": 38,
		"BOL": 39,
		"BOP": 40,
		"BOV": 41,
		"BRB": 42,
		"BRC": 43,
		"BRE": 44,
		"BRL": 45,
		"BRN": 46,
		"BRR": 47,
		"BRZ": 48,
		"BSD": 49,
		"BTN": 50,
		"BUK": 51,
		"BWP": 52,
		"BYB": 53,
		"BYN": 54,
		"BYR": 55,
		"BZD": 56,
		"CAD": 57,
		"CDF": 58,
		"CHE": 59,
		"CHF": 60,
		"CHW": 61,
		"CLE": 62,
		"CLF": 63,
		"CLP": 64,
		"CNH": 65,
		"CNX": 66,
		"CNY": 67,
		"COP": 68,
		"COU": 69,
		"CRC": 70,
		"CSD": 71,
		"CSK": 72,
		"CUC": 73,
		"CUP": 74,
		"CVE": 75,
		"CYP": 76,
		"CZK": 77,
		"DDM": 78,
		"DEM": 79,
		"DJF": 80,
		"DKK": 81,
		"DOP": 82,
		"DZD": 83,
		"ECS": 84,
		"ECV": 85,
		"EEK": 86,
		"EGP": 87,
		"ERN": 88,
		"ESA": 89,
		"ESB": 90,
		"ESP": 91,
		"ETB": 92,
		"EUR": 93,
		"FIM": 94,
		"FJD": 95,
		"FKP": 96,
		"FRF": 97,
		"GBP": 98,
		"GEK": 99,
		"GEL": 100,
		"GHC": 101,
		"GHS": 102,
		"GIP": 103,
		"GMD": 104,
		"GNF": 105,
		"GNS": 106,
		"GQE": 107,
		"GRD": 108,
		"GTQ": 109,
		"GWE": 110,
		"GWP": 111,
		"GYD": 112,
		"HKD": 113,
		"HNL": 114,
		"HRD": 115,
		"HRK": 116,
		"HTG": 117,
		"HUF": 118,
		"IDR": 119,
		"IEP": 120,
		"ILP": 121,
		"ILR": 122,
		"ILS": 123,
		"INR": 124,
		"IQD": 125,
		"IRR": 126,
		"ISJ": 127,
		"ISK": 128,
		"ITL": 129,
		"JMD": 130,
		"JOD": 131,
		"JPY": 132,
		"KES": 133,
		"KGS": 134,
		"KHR": 135,
		"KMF": 136,
		"KPW": 137,
		"KRH": 138,
		"KRO": 139,
		"KRW": 140,
		"KWD": 141,
		"KYD": 142,
		"KZT": 143,
		"LAK": 144,
		"LBP": 145,
		"LKR": 146,
		"LRD": 147,
		"LSL": 148,
		"LTL": 149,
		"LTT": 150,
		"LUC": 151,
		"LUF": 152,
		"LUL": 153,
		"LVL": 154,
		"LVR": 155,
		"LYD": 156,
		"MAD": 157,
		"MAF": 158,
		"MCF": 159,
		"MDC": 160,
		"MDL": 161,
		"MGA": 162,
		"MGF": 163,
		"MKD": 164,
		"MKN": 165,
		"MLF": 166,
		"MMK": 167,
		"MNT": 168,
		"MOP": 169,
		"MRO": 170,
		"MTL": 171,
		"MTP": 172,
		"MUR": 173,
		"MVP": 174,
		"MVR": 175,
		"MWK": 176,
		"MXN": 177,
		"MXP": 178,
		"MXV": 179,
		"MYR": 180,
		"MZE": 181,
		"MZM": 182,
		"MZN": 183,
		"NAD": 184,
		"NGN": 185,
		"NIC": 186,
		"NIO": 187,
		"NLG": 188,
		"NOK": 189,
		"NPR": 190,
		"NZD": 191,
		"OMR": 192,
		"PAB": 193,
		"PEI": 194,
		"PEN": 195,
		"PES": 196,
		"PGK": 197,
		"PHP": 198,
		"PKR": 199,
		"PLN": 200,
		"PLZ": 201,
		"PTE": 202,
		"PYG": 203,
		"QAR": 204,
		"RHD": 205,
		"ROL": 206,
		"RON": 207,
		"RSD": 208,
		"RUB": 209,
		"RUR": 210,
		"RWF": 211,
		"SAR": 212,
		"SBD": 213,
		"SCR": 214,
		"SDD": 215,
		"SDG": 216,
		"SDP": 217,
		"SEK": 218,
		"SGD": 219,
		"SHP": 220,
		"SIT": 221,
		"SKK": 222,
		"SLL": 223,
		"SOS": 224,
		"SRD": 225,
		"SRG": 226,
		"SSP": 227,
		"STD": 228,
		"STN": 229,
		"SUR": 230,
		"SVC": 231,
		"SYP": 232,
		"SZL": 233,
		"THB": 234,
		"TJR": 235,
		"TJS": 236,
		"TMM": 237,
		"TMT": 238,
		"TND": 239,
		"TOP": 240,
		"TPE": 241,
		"TRL": 242,
		"TRY": 243,
		"TTD": 244,
		"TWD": 245,
		"TZS": 246,
		"UAH": 247,
		"UAK": 248,
		"UGS": 249,
		"UGX": 250,
		"USD": 251,
		"USN": 252,
		"USS": 253,
		"UYI": 254,
		"UYP": 255,
		"UYU": 256,
		"UZS": 257,
		"VEB": 258,
		"VEF": 259,
		"VND": 260,
		"VNN": 261,
		"VUV": 262,
		"WST": 263,
		"XAF": 264,
		"XAG": 265,
		"XAU": 266,
		"XBA": 267,
		"XBB": 268,
		"XBC": 269,
		"XBD": 270,
		"XCD": 271,
		"XDR": 272,
		"XEU": 273,
		"XFO": 274,
		"XFU": 275,
		"XOF": 276,
		"XPD": 277,
		"XPF": 278,
		"XPT": 279,
		"XRE": 280,
		"XSU": 281,
		"XTS": 282,
		"XUA": 283,
		"XXX": 284,
		"YDD": 285,
		"YER": 286,
		"YUD": 287,
		"YUM": 288,
		"YUN": 289,
		"YUR": 290,
		"ZAL": 291,
		"ZAR": 292,
		"ZMK": 293,
		"ZMW": 294,
		"ZRN": 295,
		"ZRZ": 296,
		"ZWD": 297,
		"ZWL": 298,
		"ZWR": 299,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[5].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[5]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{5}
}

type TripClass int32

const (
	TripClass_UNDEFINED TripClass = 0
	TripClass_Y         TripClass = 1
	TripClass_C         TripClass = 2
	TripClass_F         TripClass = 3
	TripClass_W         TripClass = 4
)

// Enum value maps for TripClass.
var (
	TripClass_name = map[int32]string{
		0: "UNDEFINED",
		1: "Y",
		2: "C",
		3: "F",
		4: "W",
	}
	TripClass_value = map[string]int32{
		"UNDEFINED": 0,
		"Y":         1,
		"C":         2,
		"F":         3,
		"W":         4,
	}
)

func (x TripClass) Enum() *TripClass {
	p := new(TripClass)
	*p = x
	return p
}

func (x TripClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripClass) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_search_v3_results_proto_enumTypes[6].Descriptor()
}

func (TripClass) Type() protoreflect.EnumType {
	return &file_protobuf_search_v3_results_proto_enumTypes[6]
}

func (x TripClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TripClass.Descriptor instead.
func (TripClass) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{6}
}

type SearchResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *SearchResults) Reset() {
	*x = SearchResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResults) ProtoMessage() {}

func (x *SearchResults) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResults.ProtoReflect.Descriptor instead.
func (*SearchResults) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{0}
}

func (x *SearchResults) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId                              string                  `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	LastUpdateTimestamp                  int64                   `protobuf:"varint,2,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	DebugInfo                            *DebugInfo              `protobuf:"bytes,3,opt,name=debug_info,json=debugInfo,proto3,oneof" json:"debug_info,omitempty"`
	Tickets                              []*Ticket               `protobuf:"bytes,4,rep,name=tickets,proto3" json:"tickets,omitempty"`
	SoftTickets                          *SoftResponse           `protobuf:"bytes,5,opt,name=soft_tickets,json=softTickets,proto3,oneof" json:"soft_tickets,omitempty"`
	BrandTicket                          *Ticket                 `protobuf:"bytes,6,opt,name=brand_ticket,json=brandTicket,proto3" json:"brand_ticket,omitempty"`
	BrandTickets                         map[int64]*Ticket       `protobuf:"bytes,7,rep,name=brand_tickets,json=brandTickets,proto3" json:"brand_tickets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CheapestTicket                       *Ticket                 `protobuf:"bytes,8,opt,name=cheapest_ticket,json=cheapestTicket,proto3,oneof" json:"cheapest_ticket,omitempty"`
	FilteredCheapestTicket               *Ticket                 `protobuf:"bytes,9,opt,name=filtered_cheapest_ticket,json=filteredCheapestTicket,proto3,oneof" json:"filtered_cheapest_ticket,omitempty"`
	CheapestTicketWithoutAirportPrecheck *Ticket                 `protobuf:"bytes,10,opt,name=cheapest_ticket_without_airport_precheck,json=cheapestTicketWithoutAirportPrecheck,proto3,oneof" json:"cheapest_ticket_without_airport_precheck,omitempty"`
	DirectFlights                        []*DirectFlights        `protobuf:"bytes,11,rep,name=direct_flights,json=directFlights,proto3" json:"direct_flights,omitempty"`
	FlightLegs                           []*FlightLeg            `protobuf:"bytes,12,rep,name=flight_legs,json=flightLegs,proto3" json:"flight_legs,omitempty"`
	Airlines                             map[string]*AirlineInfo `protobuf:"bytes,13,rep,name=airlines,proto3" json:"airlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Places                               *Places                 `protobuf:"bytes,14,opt,name=places,proto3" json:"places,omitempty"`
	Agents                               map[int64]*AgentInfo    `protobuf:"bytes,15,rep,name=agents,proto3" json:"agents,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Alliances                            map[int64]*Alliance     `protobuf:"bytes,16,rep,name=alliances,proto3" json:"alliances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Equipments                           map[string]*Equipment   `protobuf:"bytes,17,rep,name=equipments,proto3" json:"equipments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SearchParams                         *SearchParams           `protobuf:"bytes,18,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	DegradedFilterBoundaries             *DegradedBoundaries     `protobuf:"bytes,19,opt,name=degraded_filter_boundaries,json=degradedFilterBoundaries,proto3,oneof" json:"degraded_filter_boundaries,omitempty"`
	FilterBoundaries                     *Boundaries             `protobuf:"bytes,20,opt,name=filter_boundaries,json=filterBoundaries,proto3,oneof" json:"filter_boundaries,omitempty"`
	Meta                                 *ResultsMeta            `protobuf:"bytes,21,opt,name=meta,proto3" json:"meta,omitempty"`
	FilterState                          *FilterState            `protobuf:"bytes,22,opt,name=filter_state,json=filterState,proto3,oneof" json:"filter_state,omitempty"`
	Order                                Order                   `protobuf:"varint,23,opt,name=order,proto3,enum=search_v3.Order" json:"order,omitempty"`
	Brand                                Brand                   `protobuf:"varint,24,opt,name=brand,proto3,enum=search_v3.Brand" json:"brand,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{1}
}

func (x *Chunk) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *Chunk) GetLastUpdateTimestamp() int64 {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return 0
}

func (x *Chunk) GetDebugInfo() *DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *Chunk) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Chunk) GetSoftTickets() *SoftResponse {
	if x != nil {
		return x.SoftTickets
	}
	return nil
}

func (x *Chunk) GetBrandTicket() *Ticket {
	if x != nil {
		return x.BrandTicket
	}
	return nil
}

func (x *Chunk) GetBrandTickets() map[int64]*Ticket {
	if x != nil {
		return x.BrandTickets
	}
	return nil
}

func (x *Chunk) GetCheapestTicket() *Ticket {
	if x != nil {
		return x.CheapestTicket
	}
	return nil
}

func (x *Chunk) GetFilteredCheapestTicket() *Ticket {
	if x != nil {
		return x.FilteredCheapestTicket
	}
	return nil
}

func (x *Chunk) GetCheapestTicketWithoutAirportPrecheck() *Ticket {
	if x != nil {
		return x.CheapestTicketWithoutAirportPrecheck
	}
	return nil
}

func (x *Chunk) GetDirectFlights() []*DirectFlights {
	if x != nil {
		return x.DirectFlights
	}
	return nil
}

func (x *Chunk) GetFlightLegs() []*FlightLeg {
	if x != nil {
		return x.FlightLegs
	}
	return nil
}

func (x *Chunk) GetAirlines() map[string]*AirlineInfo {
	if x != nil {
		return x.Airlines
	}
	return nil
}

func (x *Chunk) GetPlaces() *Places {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *Chunk) GetAgents() map[int64]*AgentInfo {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Chunk) GetAlliances() map[int64]*Alliance {
	if x != nil {
		return x.Alliances
	}
	return nil
}

func (x *Chunk) GetEquipments() map[string]*Equipment {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *Chunk) GetSearchParams() *SearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *Chunk) GetDegradedFilterBoundaries() *DegradedBoundaries {
	if x != nil {
		return x.DegradedFilterBoundaries
	}
	return nil
}

func (x *Chunk) GetFilterBoundaries() *Boundaries {
	if x != nil {
		return x.FilterBoundaries
	}
	return nil
}

func (x *Chunk) GetMeta() *ResultsMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Chunk) GetFilterState() *FilterState {
	if x != nil {
		return x.FilterState
	}
	return nil
}

func (x *Chunk) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_BEST
}

func (x *Chunk) GetBrand() Brand {
	if x != nil {
		return x.Brand
	}
	return Brand_AS
}

type DebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName      string                    `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	DataCenter      string                    `protobuf:"bytes,2,opt,name=data_center,json=dataCenter,proto3" json:"data_center,omitempty"`
	Gates           map[string]*GateDebugInfo `protobuf:"bytes,3,rep,name=gates,proto3" json:"gates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FromCache       bool                      `protobuf:"varint,4,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
	SearchStartTime int64                     `protobuf:"varint,5,opt,name=search_start_time,json=searchStartTime,proto3" json:"search_start_time,omitempty"`
}

func (x *DebugInfo) Reset() {
	*x = DebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo) ProtoMessage() {}

func (x *DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo.ProtoReflect.Descriptor instead.
func (*DebugInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{2}
}

func (x *DebugInfo) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *DebugInfo) GetDataCenter() string {
	if x != nil {
		return x.DataCenter
	}
	return ""
}

func (x *DebugInfo) GetGates() map[string]*GateDebugInfo {
	if x != nil {
		return x.Gates
	}
	return nil
}

func (x *DebugInfo) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *DebugInfo) GetSearchStartTime() int64 {
	if x != nil {
		return x.SearchStartTime
	}
	return 0
}

type GateDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Agents                  map[int64]*AgentDebugInfo `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResponseDurationSeconds float64                   `protobuf:"fixed64,3,opt,name=response_duration_seconds,json=responseDurationSeconds,proto3" json:"response_duration_seconds,omitempty"`
	Errors                  []string                  `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	FromCache               bool                      `protobuf:"varint,5,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
	CacheSearchUuid         string                    `protobuf:"bytes,6,opt,name=cache_search_uuid,json=cacheSearchUuid,proto3" json:"cache_search_uuid,omitempty"`
	CacheSearchCreatedAt    int64                     `protobuf:"varint,7,opt,name=cache_search_created_at,json=cacheSearchCreatedAt,proto3" json:"cache_search_created_at,omitempty"`
}

func (x *GateDebugInfo) Reset() {
	*x = GateDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GateDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateDebugInfo) ProtoMessage() {}

func (x *GateDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateDebugInfo.ProtoReflect.Descriptor instead.
func (*GateDebugInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{3}
}

func (x *GateDebugInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GateDebugInfo) GetAgents() map[int64]*AgentDebugInfo {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *GateDebugInfo) GetResponseDurationSeconds() float64 {
	if x != nil {
		return x.ResponseDurationSeconds
	}
	return 0
}

func (x *GateDebugInfo) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GateDebugInfo) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *GateDebugInfo) GetCacheSearchUuid() string {
	if x != nil {
		return x.CacheSearchUuid
	}
	return ""
}

func (x *GateDebugInfo) GetCacheSearchCreatedAt() int64 {
	if x != nil {
		return x.CacheSearchCreatedAt
	}
	return 0
}

type AgentDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals                map[string]*ProposalDebugInfo `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProposalsCount           int64                         `protobuf:"varint,2,opt,name=proposals_count,json=proposalsCount,proto3" json:"proposals_count,omitempty"`
	BadProposals             map[string]int64              `protobuf:"bytes,3,rep,name=bad_proposals,json=badProposals,proto3" json:"bad_proposals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FilteredProposals        map[string]*Proposals         `protobuf:"bytes,4,rep,name=filtered_proposals,json=filteredProposals,proto3" json:"filtered_proposals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MergedFlightTermsSources map[string]int64              `protobuf:"bytes,5,rep,name=merged_flight_terms_sources,json=mergedFlightTermsSources,proto3" json:"merged_flight_terms_sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AgentDebugInfo) Reset() {
	*x = AgentDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDebugInfo) ProtoMessage() {}

func (x *AgentDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDebugInfo.ProtoReflect.Descriptor instead.
func (*AgentDebugInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{4}
}

func (x *AgentDebugInfo) GetProposals() map[string]*ProposalDebugInfo {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *AgentDebugInfo) GetProposalsCount() int64 {
	if x != nil {
		return x.ProposalsCount
	}
	return 0
}

func (x *AgentDebugInfo) GetBadProposals() map[string]int64 {
	if x != nil {
		return x.BadProposals
	}
	return nil
}

func (x *AgentDebugInfo) GetFilteredProposals() map[string]*Proposals {
	if x != nil {
		return x.FilteredProposals
	}
	return nil
}

func (x *AgentDebugInfo) GetMergedFlightTermsSources() map[string]int64 {
	if x != nil {
		return x.MergedFlightTermsSources
	}
	return nil
}

type Proposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *Proposals) Reset() {
	*x = Proposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposals) ProtoMessage() {}

func (x *Proposals) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposals.ProtoReflect.Descriptor instead.
func (*Proposals) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{5}
}

func (x *Proposals) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price             *Amount               `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	PricePerPerson    *Amount               `protobuf:"bytes,3,opt,name=price_per_person,json=pricePerPerson,proto3" json:"price_per_person,omitempty"`
	AgentId           int64                 `protobuf:"varint,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	FlightTerms       map[int64]*FlightTerm `protobuf:"bytes,5,rep,name=flight_terms,json=flightTerms,proto3" json:"flight_terms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TransferTerms     []*TransferTerms      `protobuf:"bytes,6,rep,name=transfer_terms,json=transferTerms,proto3" json:"transfer_terms,omitempty"`
	UnifiedPrice      *Amount               `protobuf:"bytes,7,opt,name=unified_price,json=unifiedPrice,proto3" json:"unified_price,omitempty"`
	Options           *ProposalOptions      `protobuf:"bytes,8,opt,name=options,proto3,oneof" json:"options,omitempty"`
	Weight            float64               `protobuf:"fixed64,9,opt,name=weight,proto3" json:"weight,omitempty"`
	FromMainAirline   bool                  `protobuf:"varint,10,opt,name=from_main_airline,json=fromMainAirline,proto3" json:"from_main_airline,omitempty"`
	Tags              []string              `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	MinimumFare       *Fare                 `protobuf:"bytes,12,opt,name=minimum_fare,json=minimumFare,proto3" json:"minimum_fare,omitempty"`
	IsWarmcache       bool                  `protobuf:"varint,13,opt,name=is_warmcache,json=isWarmcache,proto3" json:"is_warmcache,omitempty"`
	Cashback          *Cashback             `protobuf:"bytes,14,opt,name=cashback,proto3,oneof" json:"cashback,omitempty"`
	CashbackPerPerson *Cashback             `protobuf:"bytes,15,opt,name=cashback_per_person,json=cashbackPerPerson,proto3,oneof" json:"cashback_per_person,omitempty"`
	AcceptedCards     []*AcceptedCard       `protobuf:"bytes,16,rep,name=accepted_cards,json=acceptedCards,proto3" json:"accepted_cards,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{6}
}

func (x *Proposal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Proposal) GetPrice() *Amount {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Proposal) GetPricePerPerson() *Amount {
	if x != nil {
		return x.PricePerPerson
	}
	return nil
}

func (x *Proposal) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *Proposal) GetFlightTerms() map[int64]*FlightTerm {
	if x != nil {
		return x.FlightTerms
	}
	return nil
}

func (x *Proposal) GetTransferTerms() []*TransferTerms {
	if x != nil {
		return x.TransferTerms
	}
	return nil
}

func (x *Proposal) GetUnifiedPrice() *Amount {
	if x != nil {
		return x.UnifiedPrice
	}
	return nil
}

func (x *Proposal) GetOptions() *ProposalOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Proposal) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Proposal) GetFromMainAirline() bool {
	if x != nil {
		return x.FromMainAirline
	}
	return false
}

func (x *Proposal) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Proposal) GetMinimumFare() *Fare {
	if x != nil {
		return x.MinimumFare
	}
	return nil
}

func (x *Proposal) GetIsWarmcache() bool {
	if x != nil {
		return x.IsWarmcache
	}
	return false
}

func (x *Proposal) GetCashback() *Cashback {
	if x != nil {
		return x.Cashback
	}
	return nil
}

func (x *Proposal) GetCashbackPerPerson() *Cashback {
	if x != nil {
		return x.CashbackPerPerson
	}
	return nil
}

func (x *Proposal) GetAcceptedCards() []*AcceptedCard {
	if x != nil {
		return x.AcceptedCards
	}
	return nil
}

type AcceptedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	System string `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *AcceptedCard) Reset() {
	*x = AcceptedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedCard) ProtoMessage() {}

func (x *AcceptedCard) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedCard.ProtoReflect.Descriptor instead.
func (*AcceptedCard) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{7}
}

func (x *AcceptedCard) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AcceptedCard) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

type Cashback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalizedAmount *Amount `protobuf:"bytes,1,opt,name=localized_amount,json=localizedAmount,proto3,oneof" json:"localized_amount,omitempty"`
	Available       bool    `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *Cashback) Reset() {
	*x = Cashback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cashback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cashback) ProtoMessage() {}

func (x *Cashback) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cashback.ProtoReflect.Descriptor instead.
func (*Cashback) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{8}
}

func (x *Cashback) GetLocalizedAmount() *Amount {
	if x != nil {
		return x.LocalizedAmount
	}
	return nil
}

func (x *Cashback) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type Fare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               string      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Baggage            *Baggage    `protobuf:"bytes,2,opt,name=baggage,proto3,oneof" json:"baggage,omitempty"`
	Handbags           *Baggage    `protobuf:"bytes,3,opt,name=handbags,proto3,oneof" json:"handbags,omitempty"`
	ReturnBeforeFlight *TariffInfo `protobuf:"bytes,4,opt,name=return_before_flight,json=returnBeforeFlight,proto3,oneof" json:"return_before_flight,omitempty"`
	ReturnAfterFlight  *TariffInfo `protobuf:"bytes,5,opt,name=return_after_flight,json=returnAfterFlight,proto3,oneof" json:"return_after_flight,omitempty"`
	ChangeBeforeFlight *TariffInfo `protobuf:"bytes,6,opt,name=change_before_flight,json=changeBeforeFlight,proto3,oneof" json:"change_before_flight,omitempty"`
	ChangeAfterFlight  *TariffInfo `protobuf:"bytes,7,opt,name=change_after_flight,json=changeAfterFlight,proto3,oneof" json:"change_after_flight,omitempty"`
	SeatAtPurchase     *TariffInfo `protobuf:"bytes,8,opt,name=seat_at_purchase,json=seatAtPurchase,proto3,oneof" json:"seat_at_purchase,omitempty"`
	SeatAtRegistration *TariffInfo `protobuf:"bytes,9,opt,name=seat_at_registration,json=seatAtRegistration,proto3,oneof" json:"seat_at_registration,omitempty"`
	FareName           string      `protobuf:"bytes,10,opt,name=fare_name,json=fareName,proto3" json:"fare_name,omitempty"`
	Miles              float64     `protobuf:"fixed64,11,opt,name=miles,proto3" json:"miles,omitempty"`
}

func (x *Fare) Reset() {
	*x = Fare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fare) ProtoMessage() {}

func (x *Fare) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fare.ProtoReflect.Descriptor instead.
func (*Fare) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{9}
}

func (x *Fare) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Fare) GetBaggage() *Baggage {
	if x != nil {
		return x.Baggage
	}
	return nil
}

func (x *Fare) GetHandbags() *Baggage {
	if x != nil {
		return x.Handbags
	}
	return nil
}

func (x *Fare) GetReturnBeforeFlight() *TariffInfo {
	if x != nil {
		return x.ReturnBeforeFlight
	}
	return nil
}

func (x *Fare) GetReturnAfterFlight() *TariffInfo {
	if x != nil {
		return x.ReturnAfterFlight
	}
	return nil
}

func (x *Fare) GetChangeBeforeFlight() *TariffInfo {
	if x != nil {
		return x.ChangeBeforeFlight
	}
	return nil
}

func (x *Fare) GetChangeAfterFlight() *TariffInfo {
	if x != nil {
		return x.ChangeAfterFlight
	}
	return nil
}

func (x *Fare) GetSeatAtPurchase() *TariffInfo {
	if x != nil {
		return x.SeatAtPurchase
	}
	return nil
}

func (x *Fare) GetSeatAtRegistration() *TariffInfo {
	if x != nil {
		return x.SeatAtRegistration
	}
	return nil
}

func (x *Fare) GetFareName() string {
	if x != nil {
		return x.FareName
	}
	return ""
}

func (x *Fare) GetMiles() float64 {
	if x != nil {
		return x.Miles
	}
	return 0
}

type Baggage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Weight       float64 `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"`
	TotalWeight  float64 `protobuf:"fixed64,3,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Length       float64 `protobuf:"fixed64,4,opt,name=length,proto3" json:"length,omitempty"`
	Width        float64 `protobuf:"fixed64,5,opt,name=width,proto3" json:"width,omitempty"`
	Height       float64 `protobuf:"fixed64,6,opt,name=height,proto3" json:"height,omitempty"`
	SumDimension float64 `protobuf:"fixed64,7,opt,name=sum_dimension,json=sumDimension,proto3" json:"sum_dimension,omitempty"`
}

func (x *Baggage) Reset() {
	*x = Baggage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Baggage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Baggage) ProtoMessage() {}

func (x *Baggage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Baggage.ProtoReflect.Descriptor instead.
func (*Baggage) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{10}
}

func (x *Baggage) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Baggage) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Baggage) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *Baggage) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Baggage) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Baggage) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Baggage) GetSumDimension() float64 {
	if x != nil {
		return x.SumDimension
	}
	return 0
}

type TariffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available    bool    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Penalty      *Amount `protobuf:"bytes,2,opt,name=penalty,proto3,oneof" json:"penalty,omitempty"`
	IsFromConfig bool    `protobuf:"varint,3,opt,name=is_from_config,json=isFromConfig,proto3" json:"is_from_config,omitempty"`
}

func (x *TariffInfo) Reset() {
	*x = TariffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffInfo) ProtoMessage() {}

func (x *TariffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffInfo.ProtoReflect.Descriptor instead.
func (*TariffInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{11}
}

func (x *TariffInfo) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *TariffInfo) GetPenalty() *Amount {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *TariffInfo) GetIsFromConfig() bool {
	if x != nil {
		return x.IsFromConfig
	}
	return false
}

type ProposalOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hotel *Hotel `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel,omitempty"`
}

func (x *ProposalOptions) Reset() {
	*x = ProposalOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalOptions) ProtoMessage() {}

func (x *ProposalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalOptions.ProtoReflect.Descriptor instead.
func (*ProposalOptions) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{12}
}

func (x *ProposalOptions) GetHotel() *Hotel {
	if x != nil {
		return x.Hotel
	}
	return nil
}

type Hotel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stars    uint32 `protobuf:"varint,2,opt,name=stars,proto3" json:"stars,omitempty"`
	RoomType string `protobuf:"bytes,3,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
	Meals    string `protobuf:"bytes,4,opt,name=meals,proto3" json:"meals,omitempty"`
}

func (x *Hotel) Reset() {
	*x = Hotel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hotel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hotel) ProtoMessage() {}

func (x *Hotel) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hotel.ProtoReflect.Descriptor instead.
func (*Hotel) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{13}
}

func (x *Hotel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hotel) GetStars() uint32 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *Hotel) GetRoomType() string {
	if x != nil {
		return x.RoomType
	}
	return ""
}

func (x *Hotel) GetMeals() string {
	if x != nil {
		return x.Meals
	}
	return ""
}

type TransferTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []*TransferTerm `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TransferTerms) Reset() {
	*x = TransferTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTerms) ProtoMessage() {}

func (x *TransferTerms) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTerms.ProtoReflect.Descriptor instead.
func (*TransferTerms) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{14}
}

func (x *TransferTerms) GetTerms() []*TransferTerm {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TransferTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVirtualInterline bool     `protobuf:"varint,1,opt,name=is_virtual_interline,json=isVirtualInterline,proto3" json:"is_virtual_interline,omitempty"`
	Tags               []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TransferTerm) Reset() {
	*x = TransferTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTerm) ProtoMessage() {}

func (x *TransferTerm) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTerm.ProtoReflect.Descriptor instead.
func (*TransferTerm) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{15}
}

func (x *TransferTerm) GetIsVirtualInterline() bool {
	if x != nil {
		return x.IsVirtualInterline
	}
	return false
}

func (x *TransferTerm) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type FlightTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FareCode                   string                `protobuf:"bytes,1,opt,name=fare_code,json=fareCode,proto3" json:"fare_code,omitempty"`
	TripClass                  TripClass             `protobuf:"varint,2,opt,name=trip_class,json=tripClass,proto3,enum=search_v3.TripClass" json:"trip_class,omitempty"`
	SeatsAvailable             int32                 `protobuf:"varint,3,opt,name=seats_available,json=seatsAvailable,proto3" json:"seats_available,omitempty"`
	MarketingCarrierDesignator *FlightDesignator     `protobuf:"bytes,4,opt,name=marketing_carrier_designator,json=marketingCarrierDesignator,proto3,oneof" json:"marketing_carrier_designator,omitempty"`
	Baggage                    *Baggage              `protobuf:"bytes,5,opt,name=baggage,proto3,oneof" json:"baggage,omitempty"`
	Handbags                   *Baggage              `protobuf:"bytes,6,opt,name=handbags,proto3,oneof" json:"handbags,omitempty"`
	AdditionalTariffInfo       *AdditionalTariffInfo `protobuf:"bytes,7,opt,name=additional_tariff_info,json=additionalTariffInfo,proto3,oneof" json:"additional_tariff_info,omitempty"`
	IsCharter                  bool                  `protobuf:"varint,8,opt,name=is_charter,json=isCharter,proto3" json:"is_charter,omitempty"`
	Tags                       []string              `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	MergedTermsInfo            *MergedTermsInfo      `protobuf:"bytes,10,opt,name=merged_terms_info,json=mergedTermsInfo,proto3" json:"merged_terms_info,omitempty"`
	MergedFromOtherProposals   map[string]int64      `protobuf:"bytes,11,rep,name=merged_from_other_proposals,json=mergedFromOtherProposals,proto3" json:"merged_from_other_proposals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *FlightTerm) Reset() {
	*x = FlightTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightTerm) ProtoMessage() {}

func (x *FlightTerm) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightTerm.ProtoReflect.Descriptor instead.
func (*FlightTerm) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{16}
}

func (x *FlightTerm) GetFareCode() string {
	if x != nil {
		return x.FareCode
	}
	return ""
}

func (x *FlightTerm) GetTripClass() TripClass {
	if x != nil {
		return x.TripClass
	}
	return TripClass_UNDEFINED
}

func (x *FlightTerm) GetSeatsAvailable() int32 {
	if x != nil {
		return x.SeatsAvailable
	}
	return 0
}

func (x *FlightTerm) GetMarketingCarrierDesignator() *FlightDesignator {
	if x != nil {
		return x.MarketingCarrierDesignator
	}
	return nil
}

func (x *FlightTerm) GetBaggage() *Baggage {
	if x != nil {
		return x.Baggage
	}
	return nil
}

func (x *FlightTerm) GetHandbags() *Baggage {
	if x != nil {
		return x.Handbags
	}
	return nil
}

func (x *FlightTerm) GetAdditionalTariffInfo() *AdditionalTariffInfo {
	if x != nil {
		return x.AdditionalTariffInfo
	}
	return nil
}

func (x *FlightTerm) GetIsCharter() bool {
	if x != nil {
		return x.IsCharter
	}
	return false
}

func (x *FlightTerm) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FlightTerm) GetMergedTermsInfo() *MergedTermsInfo {
	if x != nil {
		return x.MergedTermsInfo
	}
	return nil
}

func (x *FlightTerm) GetMergedFromOtherProposals() map[string]int64 {
	if x != nil {
		return x.MergedFromOtherProposals
	}
	return nil
}

type MergedTermsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatAtRegistration *TariffMergeInfo  `protobuf:"bytes,1,opt,name=seat_at_registration,json=seatAtRegistration,proto3" json:"seat_at_registration,omitempty"`
	SeatAtPurchase     *TariffMergeInfo  `protobuf:"bytes,2,opt,name=seat_at_purchase,json=seatAtPurchase,proto3" json:"seat_at_purchase,omitempty"`
	ReturnBeforeFlight *TariffMergeInfo  `protobuf:"bytes,3,opt,name=return_before_flight,json=returnBeforeFlight,proto3" json:"return_before_flight,omitempty"`
	ReturnAfterFlight  *TariffMergeInfo  `protobuf:"bytes,4,opt,name=return_after_flight,json=returnAfterFlight,proto3" json:"return_after_flight,omitempty"`
	ChangeBeforeFlight *TariffMergeInfo  `protobuf:"bytes,5,opt,name=change_before_flight,json=changeBeforeFlight,proto3" json:"change_before_flight,omitempty"`
	ChangeAfterFlight  *TariffMergeInfo  `protobuf:"bytes,6,opt,name=change_after_flight,json=changeAfterFlight,proto3" json:"change_after_flight,omitempty"`
	Baggage            *BaggageMergeInfo `protobuf:"bytes,7,opt,name=baggage,proto3" json:"baggage,omitempty"`
	Handbags           *BaggageMergeInfo `protobuf:"bytes,8,opt,name=handbags,proto3" json:"handbags,omitempty"`
}

func (x *MergedTermsInfo) Reset() {
	*x = MergedTermsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedTermsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedTermsInfo) ProtoMessage() {}

func (x *MergedTermsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedTermsInfo.ProtoReflect.Descriptor instead.
func (*MergedTermsInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{17}
}

func (x *MergedTermsInfo) GetSeatAtRegistration() *TariffMergeInfo {
	if x != nil {
		return x.SeatAtRegistration
	}
	return nil
}

func (x *MergedTermsInfo) GetSeatAtPurchase() *TariffMergeInfo {
	if x != nil {
		return x.SeatAtPurchase
	}
	return nil
}

func (x *MergedTermsInfo) GetReturnBeforeFlight() *TariffMergeInfo {
	if x != nil {
		return x.ReturnBeforeFlight
	}
	return nil
}

func (x *MergedTermsInfo) GetReturnAfterFlight() *TariffMergeInfo {
	if x != nil {
		return x.ReturnAfterFlight
	}
	return nil
}

func (x *MergedTermsInfo) GetChangeBeforeFlight() *TariffMergeInfo {
	if x != nil {
		return x.ChangeBeforeFlight
	}
	return nil
}

func (x *MergedTermsInfo) GetChangeAfterFlight() *TariffMergeInfo {
	if x != nil {
		return x.ChangeAfterFlight
	}
	return nil
}

func (x *MergedTermsInfo) GetBaggage() *BaggageMergeInfo {
	if x != nil {
		return x.Baggage
	}
	return nil
}

func (x *MergedTermsInfo) GetHandbags() *BaggageMergeInfo {
	if x != nil {
		return x.Handbags
	}
	return nil
}

type TariffMergeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFromConfig *TariffMergeParams `protobuf:"bytes,1,opt,name=is_from_config,json=isFromConfig,proto3" json:"is_from_config,omitempty"`
	Mismatch     *TariffMergeParams `protobuf:"bytes,2,opt,name=mismatch,proto3" json:"mismatch,omitempty"`
}

func (x *TariffMergeInfo) Reset() {
	*x = TariffMergeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffMergeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffMergeInfo) ProtoMessage() {}

func (x *TariffMergeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffMergeInfo.ProtoReflect.Descriptor instead.
func (*TariffMergeInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{18}
}

func (x *TariffMergeInfo) GetIsFromConfig() *TariffMergeParams {
	if x != nil {
		return x.IsFromConfig
	}
	return nil
}

func (x *TariffMergeInfo) GetMismatch() *TariffMergeParams {
	if x != nil {
		return x.Mismatch
	}
	return nil
}

type TariffMergeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available           bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	PenaltyCurrencyCode bool `protobuf:"varint,2,opt,name=penalty_currency_code,json=penaltyCurrencyCode,proto3" json:"penalty_currency_code,omitempty"`
	PenaltyValue        bool `protobuf:"varint,3,opt,name=penalty_value,json=penaltyValue,proto3" json:"penalty_value,omitempty"`
}

func (x *TariffMergeParams) Reset() {
	*x = TariffMergeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffMergeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffMergeParams) ProtoMessage() {}

func (x *TariffMergeParams) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffMergeParams.ProtoReflect.Descriptor instead.
func (*TariffMergeParams) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{19}
}

func (x *TariffMergeParams) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *TariffMergeParams) GetPenaltyCurrencyCode() bool {
	if x != nil {
		return x.PenaltyCurrencyCode
	}
	return false
}

func (x *TariffMergeParams) GetPenaltyValue() bool {
	if x != nil {
		return x.PenaltyValue
	}
	return false
}

type BaggageMergeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFromConfig *BaggageMergeParams `protobuf:"bytes,1,opt,name=is_from_config,json=isFromConfig,proto3" json:"is_from_config,omitempty"`
	Mismatch     *BaggageMergeParams `protobuf:"bytes,2,opt,name=mismatch,proto3" json:"mismatch,omitempty"`
}

func (x *BaggageMergeInfo) Reset() {
	*x = BaggageMergeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaggageMergeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaggageMergeInfo) ProtoMessage() {}

func (x *BaggageMergeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaggageMergeInfo.ProtoReflect.Descriptor instead.
func (*BaggageMergeInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{20}
}

func (x *BaggageMergeInfo) GetIsFromConfig() *BaggageMergeParams {
	if x != nil {
		return x.IsFromConfig
	}
	return nil
}

func (x *BaggageMergeInfo) GetMismatch() *BaggageMergeParams {
	if x != nil {
		return x.Mismatch
	}
	return nil
}

type BaggageMergeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        bool `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Weight       bool `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	TotalWeight  bool `protobuf:"varint,3,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Height       bool `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Length       bool `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	Width        bool `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	SumDimension bool `protobuf:"varint,7,opt,name=sum_dimension,json=sumDimension,proto3" json:"sum_dimension,omitempty"`
}

func (x *BaggageMergeParams) Reset() {
	*x = BaggageMergeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaggageMergeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaggageMergeParams) ProtoMessage() {}

func (x *BaggageMergeParams) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaggageMergeParams.ProtoReflect.Descriptor instead.
func (*BaggageMergeParams) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{21}
}

func (x *BaggageMergeParams) GetCount() bool {
	if x != nil {
		return x.Count
	}
	return false
}

func (x *BaggageMergeParams) GetWeight() bool {
	if x != nil {
		return x.Weight
	}
	return false
}

func (x *BaggageMergeParams) GetTotalWeight() bool {
	if x != nil {
		return x.TotalWeight
	}
	return false
}

func (x *BaggageMergeParams) GetHeight() bool {
	if x != nil {
		return x.Height
	}
	return false
}

func (x *BaggageMergeParams) GetLength() bool {
	if x != nil {
		return x.Length
	}
	return false
}

func (x *BaggageMergeParams) GetWidth() bool {
	if x != nil {
		return x.Width
	}
	return false
}

func (x *BaggageMergeParams) GetSumDimension() bool {
	if x != nil {
		return x.SumDimension
	}
	return false
}

type AdditionalTariffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatAtPurchaseInfo     *TariffInfo `protobuf:"bytes,1,opt,name=seat_at_purchase_info,json=seatAtPurchaseInfo,proto3,oneof" json:"seat_at_purchase_info,omitempty"`
	SeatAtRegistrationInfo *TariffInfo `protobuf:"bytes,2,opt,name=seat_at_registration_info,json=seatAtRegistrationInfo,proto3,oneof" json:"seat_at_registration_info,omitempty"`
	ReturnBeforeFlight     *TariffInfo `protobuf:"bytes,3,opt,name=return_before_flight,json=returnBeforeFlight,proto3,oneof" json:"return_before_flight,omitempty"`
	ReturnAfterFlight      *TariffInfo `protobuf:"bytes,4,opt,name=return_after_flight,json=returnAfterFlight,proto3,oneof" json:"return_after_flight,omitempty"`
	ChangeBeforeFlight     *TariffInfo `protobuf:"bytes,5,opt,name=change_before_flight,json=changeBeforeFlight,proto3,oneof" json:"change_before_flight,omitempty"`
	ChangeAfterFlight      *TariffInfo `protobuf:"bytes,6,opt,name=change_after_flight,json=changeAfterFlight,proto3,oneof" json:"change_after_flight,omitempty"`
	FareName               string      `protobuf:"bytes,7,opt,name=fare_name,json=fareName,proto3" json:"fare_name,omitempty"`
	Miles                  float64     `protobuf:"fixed64,8,opt,name=miles,proto3" json:"miles,omitempty"`
}

func (x *AdditionalTariffInfo) Reset() {
	*x = AdditionalTariffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalTariffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalTariffInfo) ProtoMessage() {}

func (x *AdditionalTariffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalTariffInfo.ProtoReflect.Descriptor instead.
func (*AdditionalTariffInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{22}
}

func (x *AdditionalTariffInfo) GetSeatAtPurchaseInfo() *TariffInfo {
	if x != nil {
		return x.SeatAtPurchaseInfo
	}
	return nil
}

func (x *AdditionalTariffInfo) GetSeatAtRegistrationInfo() *TariffInfo {
	if x != nil {
		return x.SeatAtRegistrationInfo
	}
	return nil
}

func (x *AdditionalTariffInfo) GetReturnBeforeFlight() *TariffInfo {
	if x != nil {
		return x.ReturnBeforeFlight
	}
	return nil
}

func (x *AdditionalTariffInfo) GetReturnAfterFlight() *TariffInfo {
	if x != nil {
		return x.ReturnAfterFlight
	}
	return nil
}

func (x *AdditionalTariffInfo) GetChangeBeforeFlight() *TariffInfo {
	if x != nil {
		return x.ChangeBeforeFlight
	}
	return nil
}

func (x *AdditionalTariffInfo) GetChangeAfterFlight() *TariffInfo {
	if x != nil {
		return x.ChangeAfterFlight
	}
	return nil
}

func (x *AdditionalTariffInfo) GetFareName() string {
	if x != nil {
		return x.FareName
	}
	return ""
}

func (x *AdditionalTariffInfo) GetMiles() float64 {
	if x != nil {
		return x.Miles
	}
	return 0
}

type FlightDesignator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Carrier   string `protobuf:"bytes,1,opt,name=carrier,proto3" json:"carrier,omitempty"`
	AirlineId string `protobuf:"bytes,2,opt,name=airline_id,json=airlineId,proto3" json:"airline_id,omitempty"`
	Number    string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *FlightDesignator) Reset() {
	*x = FlightDesignator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightDesignator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDesignator) ProtoMessage() {}

func (x *FlightDesignator) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDesignator.ProtoReflect.Descriptor instead.
func (*FlightDesignator) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{23}
}

func (x *FlightDesignator) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *FlightDesignator) GetAirlineId() string {
	if x != nil {
		return x.AirlineId
	}
	return ""
}

func (x *FlightDesignator) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode Currency `protobuf:"varint,1,opt,name=currency_code,json=currencyCode,proto3,enum=search_v3.Currency" json:"currency_code,omitempty"`
	Value        float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{24}
}

func (x *Amount) GetCurrencyCode() Currency {
	if x != nil {
		return x.CurrencyCode
	}
	return Currency_ADP
}

func (x *Amount) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ProposalDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyPrice  *Amount                        `protobuf:"bytes,1,opt,name=agency_price,json=agencyPrice,proto3" json:"agency_price,omitempty"`
	Multiplier   float64                        `protobuf:"fixed64,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	Productivity float64                        `protobuf:"fixed64,3,opt,name=productivity,proto3" json:"productivity,omitempty"`
	FlightTerms  map[int64]*FlightTermDebugInfo `protobuf:"bytes,4,rep,name=flight_terms,json=flightTerms,proto3" json:"flight_terms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cashback     *CashbackDebugInfo             `protobuf:"bytes,5,opt,name=cashback,proto3,oneof" json:"cashback,omitempty"`
}

func (x *ProposalDebugInfo) Reset() {
	*x = ProposalDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalDebugInfo) ProtoMessage() {}

func (x *ProposalDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalDebugInfo.ProtoReflect.Descriptor instead.
func (*ProposalDebugInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{25}
}

func (x *ProposalDebugInfo) GetAgencyPrice() *Amount {
	if x != nil {
		return x.AgencyPrice
	}
	return nil
}

func (x *ProposalDebugInfo) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *ProposalDebugInfo) GetProductivity() float64 {
	if x != nil {
		return x.Productivity
	}
	return 0
}

func (x *ProposalDebugInfo) GetFlightTerms() map[int64]*FlightTermDebugInfo {
	if x != nil {
		return x.FlightTerms
	}
	return nil
}

func (x *ProposalDebugInfo) GetCashback() *CashbackDebugInfo {
	if x != nil {
		return x.Cashback
	}
	return nil
}

type FlightTermDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaggageSource      TermSource       `protobuf:"varint,1,opt,name=baggage_source,json=baggageSource,proto3,enum=search_v3.TermSource" json:"baggage_source,omitempty"`
	HandbagsSource     TermSource       `protobuf:"varint,2,opt,name=handbags_source,json=handbagsSource,proto3,enum=search_v3.TermSource" json:"handbags_source,omitempty"`
	GateTechnicalStops []*TechnicalStop `protobuf:"bytes,3,rep,name=gate_technical_stops,json=gateTechnicalStops,proto3" json:"gate_technical_stops,omitempty"`
}

func (x *FlightTermDebugInfo) Reset() {
	*x = FlightTermDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightTermDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightTermDebugInfo) ProtoMessage() {}

func (x *FlightTermDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightTermDebugInfo.ProtoReflect.Descriptor instead.
func (*FlightTermDebugInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{26}
}

func (x *FlightTermDebugInfo) GetBaggageSource() TermSource {
	if x != nil {
		return x.BaggageSource
	}
	return TermSource_GATE
}

func (x *FlightTermDebugInfo) GetHandbagsSource() TermSource {
	if x != nil {
		return x.HandbagsSource
	}
	return TermSource_GATE
}

func (x *FlightTermDebugInfo) GetGateTechnicalStops() []*TechnicalStop {
	if x != nil {
		return x.GateTechnicalStops
	}
	return nil
}

type TechnicalStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirportCode string `protobuf:"bytes,1,opt,name=airport_code,json=airportCode,proto3" json:"airport_code,omitempty"`
}

func (x *TechnicalStop) Reset() {
	*x = TechnicalStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechnicalStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalStop) ProtoMessage() {}

func (x *TechnicalStop) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnicalStop.ProtoReflect.Descriptor instead.
func (*TechnicalStop) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{27}
}

func (x *TechnicalStop) GetAirportCode() string {
	if x != nil {
		return x.AirportCode
	}
	return ""
}

type CashbackDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount          *Amount `protobuf:"bytes,1,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	LocalizedAmount *Amount `protobuf:"bytes,2,opt,name=localized_amount,json=localizedAmount,proto3,oneof" json:"localized_amount,omitempty"`
	Available       bool    `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *CashbackDebugInfo) Reset() {
	*x = CashbackDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashbackDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashbackDebugInfo) ProtoMessage() {}

func (x *CashbackDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashbackDebugInfo.ProtoReflect.Descriptor instead.
func (*CashbackDebugInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{28}
}

func (x *CashbackDebugInfo) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CashbackDebugInfo) GetLocalizedAmount() *Amount {
	if x != nil {
		return x.LocalizedAmount
	}
	return nil
}

func (x *CashbackDebugInfo) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments   []*Segment                `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	Proposals  []*Proposal               `protobuf:"bytes,2,rep,name=proposals,proto3" json:"proposals,omitempty"`
	Signature  string                    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Popularity float64                   `protobuf:"fixed64,4,opt,name=popularity,proto3" json:"popularity,omitempty"`
	Score      float64                   `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`
	Hashsum    string                    `protobuf:"bytes,6,opt,name=hashsum,proto3" json:"hashsum,omitempty"`
	Tags       []string                  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Badges     []*BadgeInfo              `protobuf:"bytes,8,rep,name=badges,proto3" json:"badges,omitempty"`
	ExtraFares map[string]*FareProposals `protobuf:"bytes,9,rep,name=extra_fares,json=extraFares,proto3" json:"extra_fares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FilteredBy []string                  `protobuf:"bytes,10,rep,name=filtered_by,json=filteredBy,proto3" json:"filtered_by,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{29}
}

func (x *Ticket) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Ticket) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *Ticket) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Ticket) GetPopularity() float64 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *Ticket) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Ticket) GetHashsum() string {
	if x != nil {
		return x.Hashsum
	}
	return ""
}

func (x *Ticket) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Ticket) GetBadges() []*BadgeInfo {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *Ticket) GetExtraFares() map[string]*FareProposals {
	if x != nil {
		return x.ExtraFares
	}
	return nil
}

func (x *Ticket) GetFilteredBy() []string {
	if x != nil {
		return x.FilteredBy
	}
	return nil
}

type FareProposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*FareProposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *FareProposals) Reset() {
	*x = FareProposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareProposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareProposals) ProtoMessage() {}

func (x *FareProposals) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareProposals.ProtoReflect.Descriptor instead.
func (*FareProposals) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{30}
}

func (x *FareProposals) GetProposals() []*FareProposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type FareProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Index      int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FareProposal) Reset() {
	*x = FareProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareProposal) ProtoMessage() {}

func (x *FareProposal) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareProposal.ProtoReflect.Descriptor instead.
func (*FareProposal) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{31}
}

func (x *FareProposal) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *FareProposal) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type BadgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Scores []float64      `protobuf:"fixed64,2,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Meta   *BadgeInfoMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *BadgeInfo) Reset() {
	*x = BadgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeInfo) ProtoMessage() {}

func (x *BadgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeInfo.ProtoReflect.Descriptor instead.
func (*BadgeInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{32}
}

func (x *BadgeInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BadgeInfo) GetScores() []float64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *BadgeInfo) GetMeta() *BadgeInfoMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type BadgeInfoMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     map[string]string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Priority int64             `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Position int64             `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Limit    int64             `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Colors   *Colors           `protobuf:"bytes,5,opt,name=colors,proto3" json:"colors,omitempty"`
}

func (x *BadgeInfoMeta) Reset() {
	*x = BadgeInfoMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeInfoMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeInfoMeta) ProtoMessage() {}

func (x *BadgeInfoMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeInfoMeta.ProtoReflect.Descriptor instead.
func (*BadgeInfoMeta) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{33}
}

func (x *BadgeInfoMeta) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *BadgeInfoMeta) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *BadgeInfoMeta) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *BadgeInfoMeta) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BadgeInfoMeta) GetColors() *Colors {
	if x != nil {
		return x.Colors
	}
	return nil
}

type Colors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Light string `protobuf:"bytes,1,opt,name=light,proto3" json:"light,omitempty"`
	Dark  string `protobuf:"bytes,2,opt,name=dark,proto3" json:"dark,omitempty"`
}

func (x *Colors) Reset() {
	*x = Colors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Colors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Colors) ProtoMessage() {}

func (x *Colors) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Colors.ProtoReflect.Descriptor instead.
func (*Colors) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{34}
}

func (x *Colors) GetLight() string {
	if x != nil {
		return x.Light
	}
	return ""
}

func (x *Colors) GetDark() string {
	if x != nil {
		return x.Dark
	}
	return ""
}

type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flights   []int64     `protobuf:"varint,1,rep,packed,name=flights,proto3" json:"flights,omitempty"`
	Transfers []*Transfer `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
	Tags      []string    `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{35}
}

func (x *Segment) GetFlights() []int64 {
	if x != nil {
		return x.Flights
	}
	return nil
}

func (x *Segment) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *Segment) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisaRules      *VisaRules `protobuf:"bytes,1,opt,name=visa_rules,json=visaRules,proto3" json:"visa_rules,omitempty"`
	RecheckBaggage bool       `protobuf:"varint,2,opt,name=recheck_baggage,json=recheckBaggage,proto3" json:"recheck_baggage,omitempty"`
	NightTransfer  bool       `protobuf:"varint,3,opt,name=night_transfer,json=nightTransfer,proto3" json:"night_transfer,omitempty"`
	Tags           []string   `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{36}
}

func (x *Transfer) GetVisaRules() *VisaRules {
	if x != nil {
		return x.VisaRules
	}
	return nil
}

func (x *Transfer) GetRecheckBaggage() bool {
	if x != nil {
		return x.RecheckBaggage
	}
	return false
}

func (x *Transfer) GetNightTransfer() bool {
	if x != nil {
		return x.NightTransfer
	}
	return false
}

func (x *Transfer) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VisaRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *VisaRules) Reset() {
	*x = VisaRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisaRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisaRules) ProtoMessage() {}

func (x *VisaRules) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisaRules.ProtoReflect.Descriptor instead.
func (*VisaRules) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{37}
}

func (x *VisaRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type SoftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiltersApplied []string  `protobuf:"bytes,1,rep,name=filters_applied,json=filtersApplied,proto3" json:"filters_applied,omitempty"`
	Tickets        []*Ticket `protobuf:"bytes,2,rep,name=tickets,proto3" json:"tickets,omitempty"`
}

func (x *SoftResponse) Reset() {
	*x = SoftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftResponse) ProtoMessage() {}

func (x *SoftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftResponse.ProtoReflect.Descriptor instead.
func (*SoftResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{38}
}

func (x *SoftResponse) GetFiltersApplied() []string {
	if x != nil {
		return x.FiltersApplied
	}
	return nil
}

func (x *SoftResponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type DirectFlights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Carrier        string          `protobuf:"bytes,1,opt,name=carrier,proto3" json:"carrier,omitempty"`
	Carriers       []string        `protobuf:"bytes,2,rep,name=carriers,proto3" json:"carriers,omitempty"`
	CheapestTicket *Ticket         `protobuf:"bytes,3,opt,name=cheapest_ticket,json=cheapestTicket,proto3" json:"cheapest_ticket,omitempty"`
	Schedule       []*ScheduleList `protobuf:"bytes,4,rep,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *DirectFlights) Reset() {
	*x = DirectFlights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectFlights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectFlights) ProtoMessage() {}

func (x *DirectFlights) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectFlights.ProtoReflect.Descriptor instead.
func (*DirectFlights) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{39}
}

func (x *DirectFlights) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *DirectFlights) GetCarriers() []string {
	if x != nil {
		return x.Carriers
	}
	return nil
}

func (x *DirectFlights) GetCheapestTicket() *Ticket {
	if x != nil {
		return x.CheapestTicket
	}
	return nil
}

func (x *DirectFlights) GetSchedule() []*ScheduleList {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type ScheduleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Schedule `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ScheduleList) Reset() {
	*x = ScheduleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleList) ProtoMessage() {}

func (x *ScheduleList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleList.ProtoReflect.Descriptor instead.
func (*ScheduleList) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{40}
}

func (x *ScheduleList) GetList() []*Schedule {
	if x != nil {
		return x.List
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time              string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Datetime          string   `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	TicketsSignatures []string `protobuf:"bytes,3,rep,name=tickets_signatures,json=ticketsSignatures,proto3" json:"tickets_signatures,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{41}
}

func (x *Schedule) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Schedule) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *Schedule) GetTicketsSignatures() []string {
	if x != nil {
		return x.TicketsSignatures
	}
	return nil
}

type FlightLeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin                     string            `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Destination                string            `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	LocalDepartureDateTime     string            `protobuf:"bytes,3,opt,name=local_departure_date_time,json=localDepartureDateTime,proto3" json:"local_departure_date_time,omitempty"`
	LocalArrivalDateTime       string            `protobuf:"bytes,4,opt,name=local_arrival_date_time,json=localArrivalDateTime,proto3" json:"local_arrival_date_time,omitempty"`
	DepartureUnixTimestamp     int64             `protobuf:"varint,5,opt,name=departure_unix_timestamp,json=departureUnixTimestamp,proto3" json:"departure_unix_timestamp,omitempty"`
	ArrivalUnixTimestamp       int64             `protobuf:"varint,6,opt,name=arrival_unix_timestamp,json=arrivalUnixTimestamp,proto3" json:"arrival_unix_timestamp,omitempty"`
	OperatingCarrierDesignator *FlightDesignator `protobuf:"bytes,7,opt,name=operating_carrier_designator,json=operatingCarrierDesignator,proto3" json:"operating_carrier_designator,omitempty"`
	Equipment                  *Equipment        `protobuf:"bytes,8,opt,name=equipment,proto3" json:"equipment,omitempty"`
	TechnicalStops             []*TechnicalStop  `protobuf:"bytes,9,rep,name=technical_stops,json=technicalStops,proto3" json:"technical_stops,omitempty"`
	Signature                  string            `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	Tags                       []string          `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *FlightLeg) Reset() {
	*x = FlightLeg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightLeg) ProtoMessage() {}

func (x *FlightLeg) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightLeg.ProtoReflect.Descriptor instead.
func (*FlightLeg) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{42}
}

func (x *FlightLeg) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FlightLeg) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *FlightLeg) GetLocalDepartureDateTime() string {
	if x != nil {
		return x.LocalDepartureDateTime
	}
	return ""
}

func (x *FlightLeg) GetLocalArrivalDateTime() string {
	if x != nil {
		return x.LocalArrivalDateTime
	}
	return ""
}

func (x *FlightLeg) GetDepartureUnixTimestamp() int64 {
	if x != nil {
		return x.DepartureUnixTimestamp
	}
	return 0
}

func (x *FlightLeg) GetArrivalUnixTimestamp() int64 {
	if x != nil {
		return x.ArrivalUnixTimestamp
	}
	return 0
}

func (x *FlightLeg) GetOperatingCarrierDesignator() *FlightDesignator {
	if x != nil {
		return x.OperatingCarrierDesignator
	}
	return nil
}

func (x *FlightLeg) GetEquipment() *Equipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *FlightLeg) GetTechnicalStops() []*TechnicalStop {
	if x != nil {
		return x.TechnicalStops
	}
	return nil
}

func (x *FlightLeg) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *FlightLeg) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AirlineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iata       string                      `protobuf:"bytes,1,opt,name=iata,proto3" json:"iata,omitempty"`
	IsLowcost  bool                        `protobuf:"varint,2,opt,name=is_lowcost,json=isLowcost,proto3" json:"is_lowcost,omitempty"`
	Name       map[string]*MapStringString `protobuf:"bytes,3,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllianceId int64                       `protobuf:"varint,4,opt,name=alliance_id,json=allianceId,proto3" json:"alliance_id,omitempty"`
	SiteName   string                      `protobuf:"bytes,5,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	BrandColor string                      `protobuf:"bytes,6,opt,name=brand_color,json=brandColor,proto3" json:"brand_color,omitempty"`
}

func (x *AirlineInfo) Reset() {
	*x = AirlineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineInfo) ProtoMessage() {}

func (x *AirlineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineInfo.ProtoReflect.Descriptor instead.
func (*AirlineInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{43}
}

func (x *AirlineInfo) GetIata() string {
	if x != nil {
		return x.Iata
	}
	return ""
}

func (x *AirlineInfo) GetIsLowcost() bool {
	if x != nil {
		return x.IsLowcost
	}
	return false
}

func (x *AirlineInfo) GetName() map[string]*MapStringString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AirlineInfo) GetAllianceId() int64 {
	if x != nil {
		return x.AllianceId
	}
	return 0
}

func (x *AirlineInfo) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *AirlineInfo) GetBrandColor() string {
	if x != nil {
		return x.BrandColor
	}
	return ""
}

type MapStringString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]string `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringString) Reset() {
	*x = MapStringString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringString) ProtoMessage() {}

func (x *MapStringString) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringString.ProtoReflect.Descriptor instead.
func (*MapStringString) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{44}
}

func (x *MapStringString) GetMap() map[string]string {
	if x != nil {
		return x.Map
	}
	return nil
}

type Places struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Airports        map[string]*AirportInfo   `protobuf:"bytes,1,rep,name=airports,proto3" json:"airports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cities          map[string]*CityInfo      `protobuf:"bytes,2,rep,name=cities,proto3" json:"cities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Countries       map[string]*CountryInfo   `protobuf:"bytes,3,rep,name=countries,proto3" json:"countries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetroAreas      map[string]*MetroAreaInfo `protobuf:"bytes,4,rep,name=metro_areas,json=metroAreas,proto3" json:"metro_areas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AirportsToMetro map[string]string         `protobuf:"bytes,5,rep,name=airports_to_metro,json=airportsToMetro,proto3" json:"airports_to_metro,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Places) Reset() {
	*x = Places{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Places) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Places) ProtoMessage() {}

func (x *Places) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Places.ProtoReflect.Descriptor instead.
func (*Places) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{45}
}

func (x *Places) GetAirports() map[string]*AirportInfo {
	if x != nil {
		return x.Airports
	}
	return nil
}

func (x *Places) GetCities() map[string]*CityInfo {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *Places) GetCountries() map[string]*CountryInfo {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *Places) GetMetroAreas() map[string]*MetroAreaInfo {
	if x != nil {
		return x.MetroAreas
	}
	return nil
}

func (x *Places) GetAirportsToMetro() map[string]string {
	if x != nil {
		return x.AirportsToMetro
	}
	return nil
}

type AirportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                map[string]*MapStringString `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code                string                      `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CityCode            string                      `protobuf:"bytes,3,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	MetroAreaCode       string                      `protobuf:"bytes,4,opt,name=metro_area_code,json=metroAreaCode,proto3" json:"metro_area_code,omitempty"`
	Coordinates         *GeoPoint                   `protobuf:"bytes,5,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	HasTransitZone      *OptBool                    `protobuf:"bytes,6,opt,name=has_transit_zone,json=hasTransitZone,proto3" json:"has_transit_zone,omitempty"`
	TransitWorkHoursMin int64                       `protobuf:"varint,7,opt,name=transit_work_hours_min,json=transitWorkHoursMin,proto3" json:"transit_work_hours_min,omitempty"`
	TransitWorkHoursMax int64                       `protobuf:"varint,8,opt,name=transit_work_hours_max,json=transitWorkHoursMax,proto3" json:"transit_work_hours_max,omitempty"`
}

func (x *AirportInfo) Reset() {
	*x = AirportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirportInfo) ProtoMessage() {}

func (x *AirportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirportInfo.ProtoReflect.Descriptor instead.
func (*AirportInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{46}
}

func (x *AirportInfo) GetName() map[string]*MapStringString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AirportInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AirportInfo) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *AirportInfo) GetMetroAreaCode() string {
	if x != nil {
		return x.MetroAreaCode
	}
	return ""
}

func (x *AirportInfo) GetCoordinates() *GeoPoint {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *AirportInfo) GetHasTransitZone() *OptBool {
	if x != nil {
		return x.HasTransitZone
	}
	return nil
}

func (x *AirportInfo) GetTransitWorkHoursMin() int64 {
	if x != nil {
		return x.TransitWorkHoursMin
	}
	return 0
}

func (x *AirportInfo) GetTransitWorkHoursMax() int64 {
	if x != nil {
		return x.TransitWorkHoursMax
	}
	return 0
}

type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{47}
}

func (x *GeoPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GeoPoint) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type OptBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	IsUnknown bool `protobuf:"varint,2,opt,name=is_unknown,json=isUnknown,proto3" json:"is_unknown,omitempty"`
}

func (x *OptBool) Reset() {
	*x = OptBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptBool) ProtoMessage() {}

func (x *OptBool) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptBool.ProtoReflect.Descriptor instead.
func (*OptBool) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{48}
}

func (x *OptBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *OptBool) GetIsUnknown() bool {
	if x != nil {
		return x.IsUnknown
	}
	return false
}

type CityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string                      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name     map[string]*MapStringString `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Country  string                      `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Timezone string                      `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Airports []string                    `protobuf:"bytes,5,rep,name=airports,proto3" json:"airports,omitempty"`
}

func (x *CityInfo) Reset() {
	*x = CityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityInfo) ProtoMessage() {}

func (x *CityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityInfo.ProtoReflect.Descriptor instead.
func (*CityInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{49}
}

func (x *CityInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CityInfo) GetName() map[string]*MapStringString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CityInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CityInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CityInfo) GetAirports() []string {
	if x != nil {
		return x.Airports
	}
	return nil
}

type CountryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string                      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name        map[string]*MapStringString `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnifiedVisa string                      `protobuf:"bytes,3,opt,name=unified_visa,json=unifiedVisa,proto3" json:"unified_visa,omitempty"`
}

func (x *CountryInfo) Reset() {
	*x = CountryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryInfo) ProtoMessage() {}

func (x *CountryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryInfo.ProtoReflect.Descriptor instead.
func (*CountryInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{50}
}

func (x *CountryInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CountryInfo) GetName() map[string]*MapStringString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CountryInfo) GetUnifiedVisa() string {
	if x != nil {
		return x.UnifiedVisa
	}
	return ""
}

type MetroAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Airports []string `protobuf:"bytes,2,rep,name=airports,proto3" json:"airports,omitempty"`
	Timezone string   `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *MetroAreaInfo) Reset() {
	*x = MetroAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetroAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetroAreaInfo) ProtoMessage() {}

func (x *MetroAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetroAreaInfo.ProtoReflect.Descriptor instead.
func (*MetroAreaInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{51}
}

func (x *MetroAreaInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MetroAreaInfo) GetAirports() []string {
	if x != nil {
		return x.Airports
	}
	return nil
}

func (x *MetroAreaInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GateName       string                      `protobuf:"bytes,2,opt,name=gate_name,json=gateName,proto3" json:"gate_name,omitempty"`
	Label          map[string]*MapStringString `protobuf:"bytes,3,rep,name=label,proto3" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PaymentMethods []string                    `protobuf:"bytes,4,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	MobileVersion  bool                        `protobuf:"varint,5,opt,name=mobile_version,json=mobileVersion,proto3" json:"mobile_version,omitempty"`
	HideProposals  bool                        `protobuf:"varint,6,opt,name=hide_proposals,json=hideProposals,proto3" json:"hide_proposals,omitempty"`
	Assisted       bool                        `protobuf:"varint,7,opt,name=assisted,proto3" json:"assisted,omitempty"`
	MobileType     string                      `protobuf:"bytes,8,opt,name=mobile_type,json=mobileType,proto3" json:"mobile_type,omitempty"`
	AirlineIatas   []string                    `protobuf:"bytes,9,rep,name=airline_iatas,json=airlineIatas,proto3" json:"airline_iatas,omitempty"`
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{52}
}

func (x *AgentInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AgentInfo) GetGateName() string {
	if x != nil {
		return x.GateName
	}
	return ""
}

func (x *AgentInfo) GetLabel() map[string]*MapStringString {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *AgentInfo) GetPaymentMethods() []string {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *AgentInfo) GetMobileVersion() bool {
	if x != nil {
		return x.MobileVersion
	}
	return false
}

func (x *AgentInfo) GetHideProposals() bool {
	if x != nil {
		return x.HideProposals
	}
	return false
}

func (x *AgentInfo) GetAssisted() bool {
	if x != nil {
		return x.Assisted
	}
	return false
}

func (x *AgentInfo) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *AgentInfo) GetAirlineIatas() []string {
	if x != nil {
		return x.AirlineIatas
	}
	return nil
}

type Alliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Alliance) Reset() {
	*x = Alliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alliance) ProtoMessage() {}

func (x *Alliance) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alliance.ProtoReflect.Descriptor instead.
func (*Alliance) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{53}
}

func (x *Alliance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Alliance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string        `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Type EquipmentType `protobuf:"varint,2,opt,name=type,proto3,enum=search_v3.EquipmentType" json:"type,omitempty"`
	Name string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Equipment) Reset() {
	*x = Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equipment) ProtoMessage() {}

func (x *Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equipment.ProtoReflect.Descriptor instead.
func (*Equipment) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{54}
}

func (x *Equipment) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Equipment) GetType() EquipmentType {
	if x != nil {
		return x.Type
	}
	return EquipmentType_UNKNOWN
}

func (x *Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passengers     *Passengers       `protobuf:"bytes,1,opt,name=passengers,proto3" json:"passengers,omitempty"`
	TripClass      TripClass         `protobuf:"varint,2,opt,name=trip_class,json=tripClass,proto3,enum=search_v3.TripClass" json:"trip_class,omitempty"`
	SourceKind     SourceKind        `protobuf:"varint,3,opt,name=source_kind,json=sourceKind,proto3,enum=search_v3.SourceKind" json:"source_kind,omitempty"`
	Experiments    map[string]string `protobuf:"bytes,4,rep,name=experiments,proto3" json:"experiments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PaymentOptions []string          `protobuf:"bytes,5,rep,name=payment_options,json=paymentOptions,proto3" json:"payment_options,omitempty"`
}

func (x *SearchParams) Reset() {
	*x = SearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParams) ProtoMessage() {}

func (x *SearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParams.ProtoReflect.Descriptor instead.
func (*SearchParams) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{55}
}

func (x *SearchParams) GetPassengers() *Passengers {
	if x != nil {
		return x.Passengers
	}
	return nil
}

func (x *SearchParams) GetTripClass() TripClass {
	if x != nil {
		return x.TripClass
	}
	return TripClass_UNDEFINED
}

func (x *SearchParams) GetSourceKind() SourceKind {
	if x != nil {
		return x.SourceKind
	}
	return SourceKind_OTHER
}

func (x *SearchParams) GetExperiments() map[string]string {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *SearchParams) GetPaymentOptions() []string {
	if x != nil {
		return x.PaymentOptions
	}
	return nil
}

type Passengers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adults   uint32 `protobuf:"varint,1,opt,name=adults,proto3" json:"adults,omitempty"`
	Children uint32 `protobuf:"varint,2,opt,name=children,proto3" json:"children,omitempty"`
	Infants  uint32 `protobuf:"varint,3,opt,name=infants,proto3" json:"infants,omitempty"`
}

func (x *Passengers) Reset() {
	*x = Passengers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Passengers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passengers) ProtoMessage() {}

func (x *Passengers) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passengers.ProtoReflect.Descriptor instead.
func (*Passengers) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{56}
}

func (x *Passengers) GetAdults() uint32 {
	if x != nil {
		return x.Adults
	}
	return 0
}

func (x *Passengers) GetChildren() uint32 {
	if x != nil {
		return x.Children
	}
	return 0
}

func (x *Passengers) GetInfants() uint32 {
	if x != nil {
		return x.Infants
	}
	return 0
}

type DegradedBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents                           map[int64]*FilterPrice                `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Airlines                         map[string]*FilterPrice               `protobuf:"bytes,2,rep,name=airlines,proto3" json:"airlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Alliances                        map[int64]*FilterPrice                `protobuf:"bytes,3,rep,name=alliances,proto3" json:"alliances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HasInterlines                    *FilterBool                           `protobuf:"bytes,4,opt,name=has_interlines,json=hasInterlines,proto3,oneof" json:"has_interlines,omitempty"`
	HasLowcosts                      *FilterBool                           `protobuf:"bytes,5,opt,name=has_lowcosts,json=hasLowcosts,proto3,oneof" json:"has_lowcosts,omitempty"`
	Airports                         map[int64]*DegradedAirportsBoundaries `protobuf:"bytes,6,rep,name=airports,proto3" json:"airports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SameDepartureArrivalAirport      map[string]*FilterPrice               `protobuf:"bytes,7,rep,name=same_departure_arrival_airport,json=sameDepartureArrivalAirport,proto3" json:"same_departure_arrival_airport,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Baggage                          *FilterBaggageBoundaries              `protobuf:"bytes,8,opt,name=baggage,proto3,oneof" json:"baggage,omitempty"`
	Equipments                       map[string]*FilterPrice               `protobuf:"bytes,9,rep,name=equipments,proto3" json:"equipments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PaymentMethods                   map[string]*FilterPrice               `protobuf:"bytes,10,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Price                            *PriceBoundaries                      `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	DepartureArrivalTime             map[int64]*DegradedTimeBoundaries     `protobuf:"bytes,12,rep,name=departure_arrival_time,json=departureArrivalTime,proto3" json:"departure_arrival_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReturnTicket                     *DegradedReturnTicketBoundaries       `protobuf:"bytes,13,opt,name=return_ticket,json=returnTicket,proto3,oneof" json:"return_ticket,omitempty"`
	ChangeTicket                     *DegradedReturnTicketBoundaries       `protobuf:"bytes,14,opt,name=change_ticket,json=changeTicket,proto3,oneof" json:"change_ticket,omitempty"`
	TransfersCount                   map[int64]*FilterPrice                `protobuf:"bytes,15,rep,name=transfers_count,json=transfersCount,proto3" json:"transfers_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TransfersDuration                *TransferDurationBoundaries           `protobuf:"bytes,16,opt,name=transfers_duration,json=transfersDuration,proto3" json:"transfers_duration,omitempty"`
	TransfersAirports                map[string]*FilterPrice               `protobuf:"bytes,17,rep,name=transfers_airports,json=transfersAirports,proto3" json:"transfers_airports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TransfersCountries               map[string]*FilterPrice               `protobuf:"bytes,18,rep,name=transfers_countries,json=transfersCountries,proto3" json:"transfers_countries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HasTransfersWithAirportChange    *FilterBool                           `protobuf:"bytes,19,opt,name=has_transfers_with_airport_change,json=hasTransfersWithAirportChange,proto3,oneof" json:"has_transfers_with_airport_change,omitempty"`
	HasTransfersWithBaggageRecheck   *FilterBool                           `protobuf:"bytes,20,opt,name=has_transfers_with_baggage_recheck,json=hasTransfersWithBaggageRecheck,proto3,oneof" json:"has_transfers_with_baggage_recheck,omitempty"`
	HasTransfersWithVisa             *FilterBool                           `protobuf:"bytes,21,opt,name=has_transfers_with_visa,json=hasTransfersWithVisa,proto3,oneof" json:"has_transfers_with_visa,omitempty"`
	HasTransfersWithVirtualInterline *FilterBool                           `protobuf:"bytes,22,opt,name=has_transfers_with_virtual_interline,json=hasTransfersWithVirtualInterline,proto3,oneof" json:"has_transfers_with_virtual_interline,omitempty"`
	HasCovidRestrictions             *FilterBool                           `protobuf:"bytes,23,opt,name=has_covid_restrictions,json=hasCovidRestrictions,proto3,oneof" json:"has_covid_restrictions,omitempty"`
	HasNightTransfers                *FilterBool                           `protobuf:"bytes,24,opt,name=has_night_transfers,json=hasNightTransfers,proto3,oneof" json:"has_night_transfers,omitempty"`
	HasConvenientTransfers           *FilterBool                           `protobuf:"bytes,25,opt,name=has_convenient_transfers,json=hasConvenientTransfers,proto3,oneof" json:"has_convenient_transfers,omitempty"`
	HasShortLayoverTransfers         *FilterBool                           `protobuf:"bytes,26,opt,name=has_short_layover_transfers,json=hasShortLayoverTransfers,proto3,oneof" json:"has_short_layover_transfers,omitempty"`
	HasLongLayoverTransfers          *FilterBool                           `protobuf:"bytes,27,opt,name=has_long_layover_transfers,json=hasLongLayoverTransfers,proto3,oneof" json:"has_long_layover_transfers,omitempty"`
}

func (x *DegradedBoundaries) Reset() {
	*x = DegradedBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedBoundaries) ProtoMessage() {}

func (x *DegradedBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedBoundaries.ProtoReflect.Descriptor instead.
func (*DegradedBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{57}
}

func (x *DegradedBoundaries) GetAgents() map[int64]*FilterPrice {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *DegradedBoundaries) GetAirlines() map[string]*FilterPrice {
	if x != nil {
		return x.Airlines
	}
	return nil
}

func (x *DegradedBoundaries) GetAlliances() map[int64]*FilterPrice {
	if x != nil {
		return x.Alliances
	}
	return nil
}

func (x *DegradedBoundaries) GetHasInterlines() *FilterBool {
	if x != nil {
		return x.HasInterlines
	}
	return nil
}

func (x *DegradedBoundaries) GetHasLowcosts() *FilterBool {
	if x != nil {
		return x.HasLowcosts
	}
	return nil
}

func (x *DegradedBoundaries) GetAirports() map[int64]*DegradedAirportsBoundaries {
	if x != nil {
		return x.Airports
	}
	return nil
}

func (x *DegradedBoundaries) GetSameDepartureArrivalAirport() map[string]*FilterPrice {
	if x != nil {
		return x.SameDepartureArrivalAirport
	}
	return nil
}

func (x *DegradedBoundaries) GetBaggage() *FilterBaggageBoundaries {
	if x != nil {
		return x.Baggage
	}
	return nil
}

func (x *DegradedBoundaries) GetEquipments() map[string]*FilterPrice {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *DegradedBoundaries) GetPaymentMethods() map[string]*FilterPrice {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *DegradedBoundaries) GetPrice() *PriceBoundaries {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DegradedBoundaries) GetDepartureArrivalTime() map[int64]*DegradedTimeBoundaries {
	if x != nil {
		return x.DepartureArrivalTime
	}
	return nil
}

func (x *DegradedBoundaries) GetReturnTicket() *DegradedReturnTicketBoundaries {
	if x != nil {
		return x.ReturnTicket
	}
	return nil
}

func (x *DegradedBoundaries) GetChangeTicket() *DegradedReturnTicketBoundaries {
	if x != nil {
		return x.ChangeTicket
	}
	return nil
}

func (x *DegradedBoundaries) GetTransfersCount() map[int64]*FilterPrice {
	if x != nil {
		return x.TransfersCount
	}
	return nil
}

func (x *DegradedBoundaries) GetTransfersDuration() *TransferDurationBoundaries {
	if x != nil {
		return x.TransfersDuration
	}
	return nil
}

func (x *DegradedBoundaries) GetTransfersAirports() map[string]*FilterPrice {
	if x != nil {
		return x.TransfersAirports
	}
	return nil
}

func (x *DegradedBoundaries) GetTransfersCountries() map[string]*FilterPrice {
	if x != nil {
		return x.TransfersCountries
	}
	return nil
}

func (x *DegradedBoundaries) GetHasTransfersWithAirportChange() *FilterBool {
	if x != nil {
		return x.HasTransfersWithAirportChange
	}
	return nil
}

func (x *DegradedBoundaries) GetHasTransfersWithBaggageRecheck() *FilterBool {
	if x != nil {
		return x.HasTransfersWithBaggageRecheck
	}
	return nil
}

func (x *DegradedBoundaries) GetHasTransfersWithVisa() *FilterBool {
	if x != nil {
		return x.HasTransfersWithVisa
	}
	return nil
}

func (x *DegradedBoundaries) GetHasTransfersWithVirtualInterline() *FilterBool {
	if x != nil {
		return x.HasTransfersWithVirtualInterline
	}
	return nil
}

func (x *DegradedBoundaries) GetHasCovidRestrictions() *FilterBool {
	if x != nil {
		return x.HasCovidRestrictions
	}
	return nil
}

func (x *DegradedBoundaries) GetHasNightTransfers() *FilterBool {
	if x != nil {
		return x.HasNightTransfers
	}
	return nil
}

func (x *DegradedBoundaries) GetHasConvenientTransfers() *FilterBool {
	if x != nil {
		return x.HasConvenientTransfers
	}
	return nil
}

func (x *DegradedBoundaries) GetHasShortLayoverTransfers() *FilterBool {
	if x != nil {
		return x.HasShortLayoverTransfers
	}
	return nil
}

func (x *DegradedBoundaries) GetHasLongLayoverTransfers() *FilterBool {
	if x != nil {
		return x.HasLongLayoverTransfers
	}
	return nil
}

type FilterPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableMinPrice  float64 `protobuf:"fixed64,1,opt,name=enable_min_price,json=enableMinPrice,proto3" json:"enable_min_price,omitempty"`
	DisableMinPrice float64 `protobuf:"fixed64,2,opt,name=disable_min_price,json=disableMinPrice,proto3" json:"disable_min_price,omitempty"`
}

func (x *FilterPrice) Reset() {
	*x = FilterPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterPrice) ProtoMessage() {}

func (x *FilterPrice) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterPrice.ProtoReflect.Descriptor instead.
func (*FilterPrice) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{58}
}

func (x *FilterPrice) GetEnableMinPrice() float64 {
	if x != nil {
		return x.EnableMinPrice
	}
	return 0
}

func (x *FilterPrice) GetDisableMinPrice() float64 {
	if x != nil {
		return x.DisableMinPrice
	}
	return 0
}

type FilterBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableMinPrice  float64 `protobuf:"fixed64,1,opt,name=enable_min_price,json=enableMinPrice,proto3" json:"enable_min_price,omitempty"`
	DisableMinPrice float64 `protobuf:"fixed64,2,opt,name=disable_min_price,json=disableMinPrice,proto3" json:"disable_min_price,omitempty"`
}

func (x *FilterBool) Reset() {
	*x = FilterBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBool) ProtoMessage() {}

func (x *FilterBool) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBool.ProtoReflect.Descriptor instead.
func (*FilterBool) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{59}
}

func (x *FilterBool) GetEnableMinPrice() float64 {
	if x != nil {
		return x.EnableMinPrice
	}
	return 0
}

func (x *FilterBool) GetDisableMinPrice() float64 {
	if x != nil {
		return x.DisableMinPrice
	}
	return 0
}

type DegradedAirportsBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arrival   map[string]*FilterPrice `protobuf:"bytes,1,rep,name=arrival,proto3" json:"arrival,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Departure map[string]*FilterPrice `protobuf:"bytes,2,rep,name=departure,proto3" json:"departure,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DegradedAirportsBoundaries) Reset() {
	*x = DegradedAirportsBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedAirportsBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedAirportsBoundaries) ProtoMessage() {}

func (x *DegradedAirportsBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedAirportsBoundaries.ProtoReflect.Descriptor instead.
func (*DegradedAirportsBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{60}
}

func (x *DegradedAirportsBoundaries) GetArrival() map[string]*FilterPrice {
	if x != nil {
		return x.Arrival
	}
	return nil
}

func (x *DegradedAirportsBoundaries) GetDeparture() map[string]*FilterPrice {
	if x != nil {
		return x.Departure
	}
	return nil
}

type FilterBaggageBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullBaggage  *FilterPrice `protobuf:"bytes,1,opt,name=full_baggage,json=fullBaggage,proto3,oneof" json:"full_baggage,omitempty"`
	NoBaggage    *FilterPrice `protobuf:"bytes,2,opt,name=no_baggage,json=noBaggage,proto3,oneof" json:"no_baggage,omitempty"`
	LargeHandbag *FilterPrice `protobuf:"bytes,3,opt,name=large_handbag,json=largeHandbag,proto3,oneof" json:"large_handbag,omitempty"`
}

func (x *FilterBaggageBoundaries) Reset() {
	*x = FilterBaggageBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBaggageBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBaggageBoundaries) ProtoMessage() {}

func (x *FilterBaggageBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBaggageBoundaries.ProtoReflect.Descriptor instead.
func (*FilterBaggageBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{61}
}

func (x *FilterBaggageBoundaries) GetFullBaggage() *FilterPrice {
	if x != nil {
		return x.FullBaggage
	}
	return nil
}

func (x *FilterBaggageBoundaries) GetNoBaggage() *FilterPrice {
	if x != nil {
		return x.NoBaggage
	}
	return nil
}

func (x *FilterBaggageBoundaries) GetLargeHandbag() *FilterPrice {
	if x != nil {
		return x.LargeHandbag
	}
	return nil
}

type BaggageBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullBaggage  float64 `protobuf:"fixed64,1,opt,name=full_baggage,json=fullBaggage,proto3" json:"full_baggage,omitempty"`
	NoBaggage    float64 `protobuf:"fixed64,2,opt,name=no_baggage,json=noBaggage,proto3" json:"no_baggage,omitempty"`
	LargeHandbag float64 `protobuf:"fixed64,3,opt,name=large_handbag,json=largeHandbag,proto3" json:"large_handbag,omitempty"`
}

func (x *BaggageBoundaries) Reset() {
	*x = BaggageBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaggageBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaggageBoundaries) ProtoMessage() {}

func (x *BaggageBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaggageBoundaries.ProtoReflect.Descriptor instead.
func (*BaggageBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{62}
}

func (x *BaggageBoundaries) GetFullBaggage() float64 {
	if x != nil {
		return x.FullBaggage
	}
	return 0
}

func (x *BaggageBoundaries) GetNoBaggage() float64 {
	if x != nil {
		return x.NoBaggage
	}
	return 0
}

func (x *BaggageBoundaries) GetLargeHandbag() float64 {
	if x != nil {
		return x.LargeHandbag
	}
	return 0
}

type PriceBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *PriceBoundaries) Reset() {
	*x = PriceBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceBoundaries) ProtoMessage() {}

func (x *PriceBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceBoundaries.ProtoReflect.Descriptor instead.
func (*PriceBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{63}
}

func (x *PriceBoundaries) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *PriceBoundaries) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type DegradedTimeBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrivalDate   map[string]*FilterPrice  `protobuf:"bytes,1,rep,name=arrival_date,json=arrivalDate,proto3" json:"arrival_date,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ArrivalTime   *DateTimeRangeBoundaries `protobuf:"bytes,2,opt,name=arrival_time,json=arrivalTime,proto3,oneof" json:"arrival_time,omitempty"`
	DepartureTime *DateTimeRangeBoundaries `protobuf:"bytes,3,opt,name=departure_time,json=departureTime,proto3,oneof" json:"departure_time,omitempty"`
	TripDuration  *RangeBoundaries         `protobuf:"bytes,4,opt,name=trip_duration,json=tripDuration,proto3,oneof" json:"trip_duration,omitempty"`
}

func (x *DegradedTimeBoundaries) Reset() {
	*x = DegradedTimeBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedTimeBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedTimeBoundaries) ProtoMessage() {}

func (x *DegradedTimeBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedTimeBoundaries.ProtoReflect.Descriptor instead.
func (*DegradedTimeBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{64}
}

func (x *DegradedTimeBoundaries) GetArrivalDate() map[string]*FilterPrice {
	if x != nil {
		return x.ArrivalDate
	}
	return nil
}

func (x *DegradedTimeBoundaries) GetArrivalTime() *DateTimeRangeBoundaries {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *DegradedTimeBoundaries) GetDepartureTime() *DateTimeRangeBoundaries {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *DegradedTimeBoundaries) GetTripDuration() *RangeBoundaries {
	if x != nil {
		return x.TripDuration
	}
	return nil
}

type DateTimeRangeBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min         string             `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max         string             `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Buckets     map[string]float64 `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BucketWidth float64            `protobuf:"fixed64,4,opt,name=bucket_width,json=bucketWidth,proto3" json:"bucket_width,omitempty"`
}

func (x *DateTimeRangeBoundaries) Reset() {
	*x = DateTimeRangeBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeRangeBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeRangeBoundaries) ProtoMessage() {}

func (x *DateTimeRangeBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeRangeBoundaries.ProtoReflect.Descriptor instead.
func (*DateTimeRangeBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{65}
}

func (x *DateTimeRangeBoundaries) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *DateTimeRangeBoundaries) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *DateTimeRangeBoundaries) GetBuckets() map[string]float64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *DateTimeRangeBoundaries) GetBucketWidth() float64 {
	if x != nil {
		return x.BucketWidth
	}
	return 0
}

type RangeBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min         int64              `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max         int64              `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Buckets     map[string]float64 `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BucketWidth float64            `protobuf:"fixed64,4,opt,name=bucket_width,json=bucketWidth,proto3" json:"bucket_width,omitempty"`
}

func (x *RangeBoundaries) Reset() {
	*x = RangeBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeBoundaries) ProtoMessage() {}

func (x *RangeBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeBoundaries.ProtoReflect.Descriptor instead.
func (*RangeBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{66}
}

func (x *RangeBoundaries) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RangeBoundaries) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RangeBoundaries) GetBuckets() map[string]float64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *RangeBoundaries) GetBucketWidth() float64 {
	if x != nil {
		return x.BucketWidth
	}
	return 0
}

type DegradedReturnTicketBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available *FilterPrice `protobuf:"bytes,1,opt,name=available,proto3,oneof" json:"available,omitempty"`
	Free      *FilterPrice `protobuf:"bytes,2,opt,name=free,proto3,oneof" json:"free,omitempty"`
}

func (x *DegradedReturnTicketBoundaries) Reset() {
	*x = DegradedReturnTicketBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedReturnTicketBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedReturnTicketBoundaries) ProtoMessage() {}

func (x *DegradedReturnTicketBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedReturnTicketBoundaries.ProtoReflect.Descriptor instead.
func (*DegradedReturnTicketBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{67}
}

func (x *DegradedReturnTicketBoundaries) GetAvailable() *FilterPrice {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *DegradedReturnTicketBoundaries) GetFree() *FilterPrice {
	if x != nil {
		return x.Free
	}
	return nil
}

type TransferDurationBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *TransferDurationBoundaries) Reset() {
	*x = TransferDurationBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferDurationBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferDurationBoundaries) ProtoMessage() {}

func (x *TransferDurationBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferDurationBoundaries.ProtoReflect.Descriptor instead.
func (*TransferDurationBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{68}
}

func (x *TransferDurationBoundaries) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *TransferDurationBoundaries) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Boundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents                           map[int64]float64             `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Airlines                         map[string]float64            `protobuf:"bytes,2,rep,name=airlines,proto3" json:"airlines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Alliances                        map[int64]float64             `protobuf:"bytes,3,rep,name=alliances,proto3" json:"alliances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	HasInterlines                    bool                          `protobuf:"varint,4,opt,name=has_interlines,json=hasInterlines,proto3" json:"has_interlines,omitempty"`
	HasLowcosts                      bool                          `protobuf:"varint,5,opt,name=has_lowcosts,json=hasLowcosts,proto3" json:"has_lowcosts,omitempty"`
	Airports                         map[int64]*AirportsBoundaries `protobuf:"bytes,6,rep,name=airports,proto3" json:"airports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SameDepartureArrivalAirport      map[string]float64            `protobuf:"bytes,7,rep,name=same_departure_arrival_airport,json=sameDepartureArrivalAirport,proto3" json:"same_departure_arrival_airport,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Baggage                          *BaggageBoundaries            `protobuf:"bytes,8,opt,name=baggage,proto3" json:"baggage,omitempty"`
	Equipments                       map[string]float64            `protobuf:"bytes,9,rep,name=equipments,proto3" json:"equipments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	PaymentMethods                   map[string]float64            `protobuf:"bytes,10,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Price                            *PriceBoundaries              `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	DepartureArrivalTime             map[int64]*TimeBoundaries     `protobuf:"bytes,12,rep,name=departure_arrival_time,json=departureArrivalTime,proto3" json:"departure_arrival_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReturnTicket                     *ReturnBoundaries             `protobuf:"bytes,13,opt,name=return_ticket,json=returnTicket,proto3" json:"return_ticket,omitempty"`
	ChangeTicket                     *ChangeBoundaries             `protobuf:"bytes,14,opt,name=change_ticket,json=changeTicket,proto3" json:"change_ticket,omitempty"`
	TransfersCount                   map[int64]float64             `protobuf:"bytes,15,rep,name=transfers_count,json=transfersCount,proto3" json:"transfers_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	TransfersDuration                *TransferDurationBoundaries   `protobuf:"bytes,16,opt,name=transfers_duration,json=transfersDuration,proto3,oneof" json:"transfers_duration,omitempty"`
	TransfersAirports                map[string]float64            `protobuf:"bytes,17,rep,name=transfers_airports,json=transfersAirports,proto3" json:"transfers_airports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	TransfersCountries               map[string]float64            `protobuf:"bytes,18,rep,name=transfers_countries,json=transfersCountries,proto3" json:"transfers_countries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	HasTransfersWithAirportChange    bool                          `protobuf:"varint,19,opt,name=has_transfers_with_airport_change,json=hasTransfersWithAirportChange,proto3" json:"has_transfers_with_airport_change,omitempty"`
	HasTransfersWithBaggageRecheck   bool                          `protobuf:"varint,20,opt,name=has_transfers_with_baggage_recheck,json=hasTransfersWithBaggageRecheck,proto3" json:"has_transfers_with_baggage_recheck,omitempty"`
	HasTransfersWithVisa             bool                          `protobuf:"varint,21,opt,name=has_transfers_with_visa,json=hasTransfersWithVisa,proto3" json:"has_transfers_with_visa,omitempty"`
	HasTransfersWithVirtualInterline bool                          `protobuf:"varint,22,opt,name=has_transfers_with_virtual_interline,json=hasTransfersWithVirtualInterline,proto3" json:"has_transfers_with_virtual_interline,omitempty"`
	HasCovidRestrictions             bool                          `protobuf:"varint,23,opt,name=has_covid_restrictions,json=hasCovidRestrictions,proto3" json:"has_covid_restrictions,omitempty"`
	HasNightTransfers                bool                          `protobuf:"varint,24,opt,name=has_night_transfers,json=hasNightTransfers,proto3" json:"has_night_transfers,omitempty"`
	HasConvenientTransfers           bool                          `protobuf:"varint,25,opt,name=has_convenient_transfers,json=hasConvenientTransfers,proto3" json:"has_convenient_transfers,omitempty"`
	HasShortLayoverTransfers         bool                          `protobuf:"varint,26,opt,name=has_short_layover_transfers,json=hasShortLayoverTransfers,proto3" json:"has_short_layover_transfers,omitempty"`
	HasLongLayoverTransfers          bool                          `protobuf:"varint,27,opt,name=has_long_layover_transfers,json=hasLongLayoverTransfers,proto3" json:"has_long_layover_transfers,omitempty"`
}

func (x *Boundaries) Reset() {
	*x = Boundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boundaries) ProtoMessage() {}

func (x *Boundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boundaries.ProtoReflect.Descriptor instead.
func (*Boundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{69}
}

func (x *Boundaries) GetAgents() map[int64]float64 {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Boundaries) GetAirlines() map[string]float64 {
	if x != nil {
		return x.Airlines
	}
	return nil
}

func (x *Boundaries) GetAlliances() map[int64]float64 {
	if x != nil {
		return x.Alliances
	}
	return nil
}

func (x *Boundaries) GetHasInterlines() bool {
	if x != nil {
		return x.HasInterlines
	}
	return false
}

func (x *Boundaries) GetHasLowcosts() bool {
	if x != nil {
		return x.HasLowcosts
	}
	return false
}

func (x *Boundaries) GetAirports() map[int64]*AirportsBoundaries {
	if x != nil {
		return x.Airports
	}
	return nil
}

func (x *Boundaries) GetSameDepartureArrivalAirport() map[string]float64 {
	if x != nil {
		return x.SameDepartureArrivalAirport
	}
	return nil
}

func (x *Boundaries) GetBaggage() *BaggageBoundaries {
	if x != nil {
		return x.Baggage
	}
	return nil
}

func (x *Boundaries) GetEquipments() map[string]float64 {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *Boundaries) GetPaymentMethods() map[string]float64 {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *Boundaries) GetPrice() *PriceBoundaries {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Boundaries) GetDepartureArrivalTime() map[int64]*TimeBoundaries {
	if x != nil {
		return x.DepartureArrivalTime
	}
	return nil
}

func (x *Boundaries) GetReturnTicket() *ReturnBoundaries {
	if x != nil {
		return x.ReturnTicket
	}
	return nil
}

func (x *Boundaries) GetChangeTicket() *ChangeBoundaries {
	if x != nil {
		return x.ChangeTicket
	}
	return nil
}

func (x *Boundaries) GetTransfersCount() map[int64]float64 {
	if x != nil {
		return x.TransfersCount
	}
	return nil
}

func (x *Boundaries) GetTransfersDuration() *TransferDurationBoundaries {
	if x != nil {
		return x.TransfersDuration
	}
	return nil
}

func (x *Boundaries) GetTransfersAirports() map[string]float64 {
	if x != nil {
		return x.TransfersAirports
	}
	return nil
}

func (x *Boundaries) GetTransfersCountries() map[string]float64 {
	if x != nil {
		return x.TransfersCountries
	}
	return nil
}

func (x *Boundaries) GetHasTransfersWithAirportChange() bool {
	if x != nil {
		return x.HasTransfersWithAirportChange
	}
	return false
}

func (x *Boundaries) GetHasTransfersWithBaggageRecheck() bool {
	if x != nil {
		return x.HasTransfersWithBaggageRecheck
	}
	return false
}

func (x *Boundaries) GetHasTransfersWithVisa() bool {
	if x != nil {
		return x.HasTransfersWithVisa
	}
	return false
}

func (x *Boundaries) GetHasTransfersWithVirtualInterline() bool {
	if x != nil {
		return x.HasTransfersWithVirtualInterline
	}
	return false
}

func (x *Boundaries) GetHasCovidRestrictions() bool {
	if x != nil {
		return x.HasCovidRestrictions
	}
	return false
}

func (x *Boundaries) GetHasNightTransfers() bool {
	if x != nil {
		return x.HasNightTransfers
	}
	return false
}

func (x *Boundaries) GetHasConvenientTransfers() bool {
	if x != nil {
		return x.HasConvenientTransfers
	}
	return false
}

func (x *Boundaries) GetHasShortLayoverTransfers() bool {
	if x != nil {
		return x.HasShortLayoverTransfers
	}
	return false
}

func (x *Boundaries) GetHasLongLayoverTransfers() bool {
	if x != nil {
		return x.HasLongLayoverTransfers
	}
	return false
}

type ReturnBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available float64 `protobuf:"fixed64,1,opt,name=available,proto3" json:"available,omitempty"`
	Free      float64 `protobuf:"fixed64,2,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *ReturnBoundaries) Reset() {
	*x = ReturnBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnBoundaries) ProtoMessage() {}

func (x *ReturnBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnBoundaries.ProtoReflect.Descriptor instead.
func (*ReturnBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{70}
}

func (x *ReturnBoundaries) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *ReturnBoundaries) GetFree() float64 {
	if x != nil {
		return x.Free
	}
	return 0
}

type ChangeBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available float64 `protobuf:"fixed64,1,opt,name=available,proto3" json:"available,omitempty"`
	Free      float64 `protobuf:"fixed64,2,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *ChangeBoundaries) Reset() {
	*x = ChangeBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBoundaries) ProtoMessage() {}

func (x *ChangeBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBoundaries.ProtoReflect.Descriptor instead.
func (*ChangeBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{71}
}

func (x *ChangeBoundaries) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *ChangeBoundaries) GetFree() float64 {
	if x != nil {
		return x.Free
	}
	return 0
}

type AirportsBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arrival   map[string]float64 `protobuf:"bytes,1,rep,name=arrival,proto3" json:"arrival,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Departure map[string]float64 `protobuf:"bytes,2,rep,name=departure,proto3" json:"departure,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *AirportsBoundaries) Reset() {
	*x = AirportsBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirportsBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirportsBoundaries) ProtoMessage() {}

func (x *AirportsBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirportsBoundaries.ProtoReflect.Descriptor instead.
func (*AirportsBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{72}
}

func (x *AirportsBoundaries) GetArrival() map[string]float64 {
	if x != nil {
		return x.Arrival
	}
	return nil
}

func (x *AirportsBoundaries) GetDeparture() map[string]float64 {
	if x != nil {
		return x.Departure
	}
	return nil
}

type TimeBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrivalDate   map[string]float64       `protobuf:"bytes,1,rep,name=arrival_date,json=arrivalDate,proto3" json:"arrival_date,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ArrivalTime   *DateTimeRangeBoundaries `protobuf:"bytes,2,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	DepartureTime *DateTimeRangeBoundaries `protobuf:"bytes,3,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	TripDuration  *RangeBoundaries         `protobuf:"bytes,4,opt,name=trip_duration,json=tripDuration,proto3" json:"trip_duration,omitempty"`
}

func (x *TimeBoundaries) Reset() {
	*x = TimeBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBoundaries) ProtoMessage() {}

func (x *TimeBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBoundaries.ProtoReflect.Descriptor instead.
func (*TimeBoundaries) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{73}
}

func (x *TimeBoundaries) GetArrivalDate() map[string]float64 {
	if x != nil {
		return x.ArrivalDate
	}
	return nil
}

func (x *TimeBoundaries) GetArrivalTime() *DateTimeRangeBoundaries {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *TimeBoundaries) GetDepartureTime() *DateTimeRangeBoundaries {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *TimeBoundaries) GetTripDuration() *RangeBoundaries {
	if x != nil {
		return x.TripDuration
	}
	return nil
}

type ResultsMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilteredTicketsCount int64 `protobuf:"varint,1,opt,name=filtered_tickets_count,json=filteredTicketsCount,proto3" json:"filtered_tickets_count,omitempty"`
	TotalTicketsCount    int64 `protobuf:"varint,2,opt,name=total_tickets_count,json=totalTicketsCount,proto3" json:"total_tickets_count,omitempty"`
	DirectTicketsCount   int64 `protobuf:"varint,3,opt,name=direct_tickets_count,json=directTicketsCount,proto3" json:"direct_tickets_count,omitempty"`
}

func (x *ResultsMeta) Reset() {
	*x = ResultsMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsMeta) ProtoMessage() {}

func (x *ResultsMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsMeta.ProtoReflect.Descriptor instead.
func (*ResultsMeta) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{74}
}

func (x *ResultsMeta) GetFilteredTicketsCount() int64 {
	if x != nil {
		return x.FilteredTicketsCount
	}
	return 0
}

func (x *ResultsMeta) GetTotalTicketsCount() int64 {
	if x != nil {
		return x.TotalTicketsCount
	}
	return 0
}

func (x *ResultsMeta) GetDirectTicketsCount() int64 {
	if x != nil {
		return x.DirectTicketsCount
	}
	return 0
}

type FilterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents                           []int64                  `protobuf:"varint,1,rep,packed,name=agents,proto3" json:"agents,omitempty"`
	Airlines                         []string                 `protobuf:"bytes,2,rep,name=airlines,proto3" json:"airlines,omitempty"`
	Alliances                        []int64                  `protobuf:"varint,3,rep,packed,name=alliances,proto3" json:"alliances,omitempty"`
	WithoutInterlines                bool                     `protobuf:"varint,4,opt,name=without_interlines,json=withoutInterlines,proto3" json:"without_interlines,omitempty"`
	WithoutLowcosts                  bool                     `protobuf:"varint,5,opt,name=without_lowcosts,json=withoutLowcosts,proto3" json:"without_lowcosts,omitempty"`
	Segments                         map[int64]*SegmentFilter `protobuf:"bytes,6,rep,name=segments,proto3" json:"segments,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WithSameDepartureArrivalAirport  []string                 `protobuf:"bytes,7,rep,name=with_same_departure_arrival_airport,json=withSameDepartureArrivalAirport,proto3" json:"with_same_departure_arrival_airport,omitempty"`
	Equipments                       []string                 `protobuf:"bytes,8,rep,name=equipments,proto3" json:"equipments,omitempty"`
	PaymentMethods                   []string                 `protobuf:"bytes,9,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	PinFlightSignatures              []string                 `protobuf:"bytes,10,rep,name=pin_flight_signatures,json=pinFlightSignatures,proto3" json:"pin_flight_signatures,omitempty"`
	Price                            []*FloatRange            `protobuf:"bytes,11,rep,name=price,proto3" json:"price,omitempty"`
	TransfersCount                   []int64                  `protobuf:"varint,12,rep,packed,name=transfers_count,json=transfersCount,proto3" json:"transfers_count,omitempty"`
	TransfersDuration                []*Range                 `protobuf:"bytes,13,rep,name=transfers_duration,json=transfersDuration,proto3" json:"transfers_duration,omitempty"`
	TransfersWithoutAirportChange    bool                     `protobuf:"varint,14,opt,name=transfers_without_airport_change,json=transfersWithoutAirportChange,proto3" json:"transfers_without_airport_change,omitempty"`
	TransfersWithoutBaggageRecheck   bool                     `protobuf:"varint,15,opt,name=transfers_without_baggage_recheck,json=transfersWithoutBaggageRecheck,proto3" json:"transfers_without_baggage_recheck,omitempty"`
	TransfersWithoutVisa             bool                     `protobuf:"varint,16,opt,name=transfers_without_visa,json=transfersWithoutVisa,proto3" json:"transfers_without_visa,omitempty"`
	TransfersWithoutVirtualInterline bool                     `protobuf:"varint,17,opt,name=transfers_without_virtual_interline,json=transfersWithoutVirtualInterline,proto3" json:"transfers_without_virtual_interline,omitempty"`
	ConvenientTransfers              bool                     `protobuf:"varint,18,opt,name=convenient_transfers,json=convenientTransfers,proto3" json:"convenient_transfers,omitempty"`
	WithoutNightTransfers            bool                     `protobuf:"varint,19,opt,name=without_night_transfers,json=withoutNightTransfers,proto3" json:"without_night_transfers,omitempty"`
	WithoutShortLayover              bool                     `protobuf:"varint,20,opt,name=without_short_layover,json=withoutShortLayover,proto3" json:"without_short_layover,omitempty"`
	WithoutLongLayover               bool                     `protobuf:"varint,21,opt,name=without_long_layover,json=withoutLongLayover,proto3" json:"without_long_layover,omitempty"`
	TransfersAirports                []string                 `protobuf:"bytes,22,rep,name=transfers_airports,json=transfersAirports,proto3" json:"transfers_airports,omitempty"`
	TransfersCountries               []string                 `protobuf:"bytes,23,rep,name=transfers_countries,json=transfersCountries,proto3" json:"transfers_countries,omitempty"`
	WithoutCovidRestrictions         bool                     `protobuf:"varint,24,opt,name=without_covid_restrictions,json=withoutCovidRestrictions,proto3" json:"without_covid_restrictions,omitempty"`
	Baggage                          []string                 `protobuf:"bytes,25,rep,name=baggage,proto3" json:"baggage,omitempty"`
	TimeBuckets                      *TimeBuckets             `protobuf:"bytes,26,opt,name=time_buckets,json=timeBuckets,proto3,oneof" json:"time_buckets,omitempty"`
	ReturnBeforeFlight               []string                 `protobuf:"bytes,27,rep,name=return_before_flight,json=returnBeforeFlight,proto3" json:"return_before_flight,omitempty"`
	ChangeBeforeFlight               []string                 `protobuf:"bytes,28,rep,name=change_before_flight,json=changeBeforeFlight,proto3" json:"change_before_flight,omitempty"`
}

func (x *FilterState) Reset() {
	*x = FilterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterState) ProtoMessage() {}

func (x *FilterState) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterState.ProtoReflect.Descriptor instead.
func (*FilterState) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{75}
}

func (x *FilterState) GetAgents() []int64 {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *FilterState) GetAirlines() []string {
	if x != nil {
		return x.Airlines
	}
	return nil
}

func (x *FilterState) GetAlliances() []int64 {
	if x != nil {
		return x.Alliances
	}
	return nil
}

func (x *FilterState) GetWithoutInterlines() bool {
	if x != nil {
		return x.WithoutInterlines
	}
	return false
}

func (x *FilterState) GetWithoutLowcosts() bool {
	if x != nil {
		return x.WithoutLowcosts
	}
	return false
}

func (x *FilterState) GetSegments() map[int64]*SegmentFilter {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *FilterState) GetWithSameDepartureArrivalAirport() []string {
	if x != nil {
		return x.WithSameDepartureArrivalAirport
	}
	return nil
}

func (x *FilterState) GetEquipments() []string {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *FilterState) GetPaymentMethods() []string {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *FilterState) GetPinFlightSignatures() []string {
	if x != nil {
		return x.PinFlightSignatures
	}
	return nil
}

func (x *FilterState) GetPrice() []*FloatRange {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *FilterState) GetTransfersCount() []int64 {
	if x != nil {
		return x.TransfersCount
	}
	return nil
}

func (x *FilterState) GetTransfersDuration() []*Range {
	if x != nil {
		return x.TransfersDuration
	}
	return nil
}

func (x *FilterState) GetTransfersWithoutAirportChange() bool {
	if x != nil {
		return x.TransfersWithoutAirportChange
	}
	return false
}

func (x *FilterState) GetTransfersWithoutBaggageRecheck() bool {
	if x != nil {
		return x.TransfersWithoutBaggageRecheck
	}
	return false
}

func (x *FilterState) GetTransfersWithoutVisa() bool {
	if x != nil {
		return x.TransfersWithoutVisa
	}
	return false
}

func (x *FilterState) GetTransfersWithoutVirtualInterline() bool {
	if x != nil {
		return x.TransfersWithoutVirtualInterline
	}
	return false
}

func (x *FilterState) GetConvenientTransfers() bool {
	if x != nil {
		return x.ConvenientTransfers
	}
	return false
}

func (x *FilterState) GetWithoutNightTransfers() bool {
	if x != nil {
		return x.WithoutNightTransfers
	}
	return false
}

func (x *FilterState) GetWithoutShortLayover() bool {
	if x != nil {
		return x.WithoutShortLayover
	}
	return false
}

func (x *FilterState) GetWithoutLongLayover() bool {
	if x != nil {
		return x.WithoutLongLayover
	}
	return false
}

func (x *FilterState) GetTransfersAirports() []string {
	if x != nil {
		return x.TransfersAirports
	}
	return nil
}

func (x *FilterState) GetTransfersCountries() []string {
	if x != nil {
		return x.TransfersCountries
	}
	return nil
}

func (x *FilterState) GetWithoutCovidRestrictions() bool {
	if x != nil {
		return x.WithoutCovidRestrictions
	}
	return false
}

func (x *FilterState) GetBaggage() []string {
	if x != nil {
		return x.Baggage
	}
	return nil
}

func (x *FilterState) GetTimeBuckets() *TimeBuckets {
	if x != nil {
		return x.TimeBuckets
	}
	return nil
}

func (x *FilterState) GetReturnBeforeFlight() []string {
	if x != nil {
		return x.ReturnBeforeFlight
	}
	return nil
}

func (x *FilterState) GetChangeBeforeFlight() []string {
	if x != nil {
		return x.ChangeBeforeFlight
	}
	return nil
}

type TimeBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrivalTimeBucketWidth      int64 `protobuf:"varint,1,opt,name=arrival_time_bucket_width,json=arrivalTimeBucketWidth,proto3" json:"arrival_time_bucket_width,omitempty"`
	DepartureTimeBucketWidth    int64 `protobuf:"varint,2,opt,name=departure_time_bucket_width,json=departureTimeBucketWidth,proto3" json:"departure_time_bucket_width,omitempty"`
	TripDurationTimeBucketWidth int64 `protobuf:"varint,3,opt,name=trip_duration_time_bucket_width,json=tripDurationTimeBucketWidth,proto3" json:"trip_duration_time_bucket_width,omitempty"`
}

func (x *TimeBuckets) Reset() {
	*x = TimeBuckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBuckets) ProtoMessage() {}

func (x *TimeBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBuckets.ProtoReflect.Descriptor instead.
func (*TimeBuckets) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{76}
}

func (x *TimeBuckets) GetArrivalTimeBucketWidth() int64 {
	if x != nil {
		return x.ArrivalTimeBucketWidth
	}
	return 0
}

func (x *TimeBuckets) GetDepartureTimeBucketWidth() int64 {
	if x != nil {
		return x.DepartureTimeBucketWidth
	}
	return 0
}

func (x *TimeBuckets) GetTripDurationTimeBucketWidth() int64 {
	if x != nil {
		return x.TripDurationTimeBucketWidth
	}
	return 0
}

type SegmentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirportsArrival   []string               `protobuf:"bytes,1,rep,name=airports_arrival,json=airportsArrival,proto3" json:"airports_arrival,omitempty"`
	AirportsDeparture []string               `protobuf:"bytes,2,rep,name=airports_departure,json=airportsDeparture,proto3" json:"airports_departure,omitempty"`
	ArrivalTime       []*DateTimeOrTimeRange `protobuf:"bytes,3,rep,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	ArrivalDate       []string               `protobuf:"bytes,4,rep,name=arrival_date,json=arrivalDate,proto3" json:"arrival_date,omitempty"`
	DepartureTime     []*DateTimeRange       `protobuf:"bytes,5,rep,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	TripDuration      []*Range               `protobuf:"bytes,6,rep,name=trip_duration,json=tripDuration,proto3" json:"trip_duration,omitempty"`
}

func (x *SegmentFilter) Reset() {
	*x = SegmentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentFilter) ProtoMessage() {}

func (x *SegmentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentFilter.ProtoReflect.Descriptor instead.
func (*SegmentFilter) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{77}
}

func (x *SegmentFilter) GetAirportsArrival() []string {
	if x != nil {
		return x.AirportsArrival
	}
	return nil
}

func (x *SegmentFilter) GetAirportsDeparture() []string {
	if x != nil {
		return x.AirportsDeparture
	}
	return nil
}

func (x *SegmentFilter) GetArrivalTime() []*DateTimeOrTimeRange {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *SegmentFilter) GetArrivalDate() []string {
	if x != nil {
		return x.ArrivalDate
	}
	return nil
}

func (x *SegmentFilter) GetDepartureTime() []*DateTimeRange {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *SegmentFilter) GetTripDuration() []*Range {
	if x != nil {
		return x.TripDuration
	}
	return nil
}

type DateTimeOrTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min string `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max string `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *DateTimeOrTimeRange) Reset() {
	*x = DateTimeOrTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeOrTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeOrTimeRange) ProtoMessage() {}

func (x *DateTimeOrTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeOrTimeRange.ProtoReflect.Descriptor instead.
func (*DateTimeOrTimeRange) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{78}
}

func (x *DateTimeOrTimeRange) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *DateTimeOrTimeRange) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

type DateTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *DateTimeRange) Reset() {
	*x = DateTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeRange) ProtoMessage() {}

func (x *DateTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeRange.ProtoReflect.Descriptor instead.
func (*DateTimeRange) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{79}
}

func (x *DateTimeRange) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *DateTimeRange) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{80}
}

func (x *Range) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Range) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type FloatRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *FloatRange) Reset() {
	*x = FloatRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_search_v3_results_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRange) ProtoMessage() {}

func (x *FloatRange) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_search_v3_results_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRange.ProtoReflect.Descriptor instead.
func (*FloatRange) Descriptor() ([]byte, []int) {
	return file_protobuf_search_v3_results_proto_rawDescGZIP(), []int{81}
}

func (x *FloatRange) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *FloatRange) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

var File_protobuf_search_v3_results_proto protoreflect.FileDescriptor

var file_protobuf_search_v3_results_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2d, 0x76, 0x33, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x22, 0x39, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0xa1, 0x10, 0x0a, 0x05, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x47, 0x0a, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x18, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x03,
	0x52, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x28, 0x63,
	0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x04, 0x52, 0x24, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0d, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c,
	0x65, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x60, 0x0a, 0x1a, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x48, 0x05, 0x52, 0x18, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x06, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x1a, 0x52, 0x0a, 0x11, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0d, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4f, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x51, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x65,
	0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x63, 0x68,
	0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa3, 0x02, 0x0a,
	0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x52,
	0x0a, 0x0a, 0x47, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8d, 0x03, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x54, 0x0a, 0x0b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf2, 0x05, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x1b, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x1a, 0x5a, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x42, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a,
	0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x8f, 0x07, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x3f,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12,
	0x36, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x41,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x61, 0x72,
	0x65, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x61, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x43, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x01, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68,
	0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x13, 0x63, 0x61, 0x73, 0x68, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x43, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x02, 0x52, 0x11, 0x63, 0x61, 0x73,
	0x68, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x1a, 0x55, 0x0a, 0x10, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63,
	0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x80, 0x01, 0x0a, 0x08, 0x43, 0x61,
	0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x06, 0x0a,
	0x04, 0x46, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x61, 0x67,
	0x67, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67, 0x67, 0x61,
	0x67, 0x65, 0x48, 0x01, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x04, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x05, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x41, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x07, 0x52, 0x12, 0x73, 0x65, 0x61, 0x74, 0x41, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x62, 0x61, 0x67, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x61, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x73, 0x75, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x22, 0x39,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74,
	0x65, 0x6c, 0x52, 0x05, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x22, 0x64, 0x0a, 0x05, 0x48, 0x6f, 0x74,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x61,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x61, 0x6c, 0x73, 0x22,
	0x3e, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x12, 0x2d, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22,
	0x54, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc0, 0x06, 0x0a, 0x0a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x74, 0x72, 0x69,
	0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x61, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x62, 0x0a, 0x1c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x07, 0x62, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x16, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x14,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x72, 0x0a, 0x1b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0x4b, 0x0a, 0x1d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc9, 0x04, 0x0a, 0x0f, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x14,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x73, 0x65, 0x61, 0x74, 0x41, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x41, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x68,
	0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64,
	0x62, 0x61, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c,
	0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x08,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67,
	0x67, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0c, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a,
	0x08, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x67,
	0x67, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x75, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x05, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x15, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65,
	0x61, 0x74, 0x41, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x19, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x16, 0x73, 0x65, 0x61, 0x74, 0x41, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x02, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x11,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x05, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x69, 0x6c, 0x65,
	0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x63, 0x0a, 0x10, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x58, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x08,
	0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x62,
	0x61, 0x63, 0x6b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x1a, 0x5e, 0x0a, 0x10, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x0e, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0d, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e,
	0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a,
	0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x12, 0x67, 0x61, 0x74, 0x65, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x22, 0x32, 0x0a, 0x0d, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc4,
	0x01, 0x0a, 0x11, 0x43, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x73,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x73, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x57, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x46, 0x0a, 0x0d, 0x46, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x46, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x65, 0x0a, 0x09, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x22, 0x6a, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x61, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x56, 0x69, 0x73, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x76, 0x69, 0x73, 0x61,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x27, 0x0a, 0x09, 0x56, 0x69, 0x73,
	0x61, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0e, 0x63, 0x68,
	0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x37, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x08, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xaf, 0x04, 0x0a, 0x09, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x65, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x5d, 0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a,
	0x53, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a,
	0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x05, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x54, 0x6f, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x1a, 0x53,
	0x0a, 0x0d, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0b, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0f, 0x4d, 0x65, 0x74,
	0x72, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x6f,
	0x4d, 0x65, 0x74, 0x72, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x03, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x41, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x10,
	0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x4f, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x4d, 0x61, 0x78, 0x1a, 0x53, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x43, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a,
	0x53, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x33, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x69, 0x73,
	0x61, 0x1a, 0x53, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68,
	0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x61, 0x74, 0x61, 0x73, 0x1a, 0x54,
	0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x54, 0x72, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x74, 0x72, 0x69, 0x70, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5a, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x9f, 0x1d,
	0x0a, 0x12, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x68,
	0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x01, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x4c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x73, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x1b, 0x73, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a,
	0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x48, 0x02, 0x52, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x5a, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a,
	0x16, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0d,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x53, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x66, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x21, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x05, 0x52, 0x1d, 0x68, 0x61, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x22, 0x68,
	0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x06,
	0x52, 0x1e, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x69, 0x73, 0x61, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x07, 0x52, 0x14, 0x68,
	0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x69, 0x73, 0x61, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x24, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x08, 0x52, 0x20, 0x68,
	0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x50, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x09, 0x52, 0x14, 0x68, 0x61, 0x73,
	0x43, 0x6f, 0x76, 0x69, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x0a, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x54, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x0b, 0x52, 0x16, 0x68, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6c, 0x48, 0x0c, 0x52, 0x18, 0x68, 0x61, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x79, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x57, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x0d, 0x52, 0x17,
	0x68, 0x61, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x4c, 0x61, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a,
	0x0d, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x0d, 0x41, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x41,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x20,
	0x53, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x17, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x24,
	0x0a, 0x22, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x76, 0x69, 0x73, 0x61, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22,
	0x63, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x52, 0x0a, 0x0c, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a,
	0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x01, 0x52, 0x09, 0x6e,
	0x6f, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x22,
	0x7a, 0x0a, 0x11, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x67,
	0x67, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x62, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x42,
	0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x62, 0x61, 0x67, 0x22, 0x35, 0x0a, 0x0f, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x22, 0xdf, 0x03, 0x0a, 0x16, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x01, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x10, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x49, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7,
	0x01, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x41, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x1a, 0x3a, 0x0a, 0x0c,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x22, 0x40,
	0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x22, 0x98, 0x15, 0x0a, 0x0a, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x61,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x4c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x1e, 0x73, 0x61,
	0x6d, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x73, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12,
	0x45, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x16,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a,
	0x22, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x68, 0x61, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x67, 0x67, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x61, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x76, 0x69, 0x73, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x69, 0x73, 0x61,
	0x12, 0x4e, 0x0a, 0x24, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20,
	0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x61, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x4c, 0x61, 0x79, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33,
	0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e,
	0x0a, 0x20, 0x53, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x62, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a,
	0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x10, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x22, 0x44, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x41, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x41, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x02, 0x0a, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa5, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x0c, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x77, 0x63, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61,
	0x6d, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1f, 0x77, 0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x69, 0x6e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x67,
	0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x5f, 0x76, 0x69, 0x73, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x56, 0x69, 0x73,
	0x61, 0x12, 0x4d, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x4c, 0x61, 0x79, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x76, 0x69, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x55, 0x0a,
	0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x44, 0x0a, 0x1f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x74, 0x72, 0x69, 0x70, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xc7, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x39, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x33, 0x0a, 0x0d, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22,
	0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x30, 0x0a, 0x0a,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x2a, 0x66,
	0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x49, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x2a, 0x45, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55,
	0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x41, 0x54, 0x10, 0x04, 0x2a, 0x66, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x50, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x32, 0x42, 0x5f,
	0x57, 0x45, 0x42, 0x10, 0x06, 0x2a, 0x9d, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45,
	0x41, 0x50, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x41, 0x52,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a, 0x17, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x06,
	0x0a, 0x02, 0x41, 0x53, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x41, 0x10, 0x01, 0x2a, 0xc2,
	0x16, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x44, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x45, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x46, 0x41, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46, 0x4e, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4b, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e,
	0x47, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4f, 0x41, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4f, 0x4b, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x41, 0x10, 0x0c,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x4c, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x4d,
	0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x50, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x52, 0x53, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x53, 0x10, 0x11, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x47, 0x10, 0x13, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x5a, 0x4d, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x5a, 0x4e, 0x10,
	0x15, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41,
	0x4d, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x4e, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x42, 0x44, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x44, 0x54, 0x10, 0x1a, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x45, 0x43, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x46, 0x10, 0x1c,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x4c, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4c,
	0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4d, 0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x47, 0x4e, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4f, 0x10, 0x21, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x48, 0x44, 0x10, 0x22, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x46, 0x10, 0x23, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x4d, 0x44, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x44, 0x10,
	0x25, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x42, 0x10, 0x26, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f,
	0x4c, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x50, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4f, 0x56, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x42, 0x10, 0x2a, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x52, 0x43, 0x10, 0x2b, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x45, 0x10, 0x2c,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x2d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4e,
	0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x52, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x52, 0x5a, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x44, 0x10, 0x31, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x54, 0x4e, 0x10, 0x32, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x4b, 0x10, 0x33, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x57, 0x50, 0x10, 0x34, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x42, 0x10,
	0x35, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x4e, 0x10, 0x36, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59,
	0x52, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x5a, 0x44, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x41, 0x44, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x44, 0x46, 0x10, 0x3a, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x48, 0x45, 0x10, 0x3b, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x46, 0x10, 0x3c,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x57, 0x10, 0x3d, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x45,
	0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x46, 0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x4c, 0x50, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x48, 0x10, 0x41, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x4e, 0x58, 0x10, 0x42, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x43, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x4f, 0x50, 0x10, 0x44, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x55, 0x10,
	0x45, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x52, 0x43, 0x10, 0x46, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53,
	0x44, 0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x4b, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x55, 0x43, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x4a, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x10, 0x4b, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x59, 0x50, 0x10, 0x4c,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10, 0x4d, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x44, 0x4d,
	0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x4d, 0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x4a, 0x46, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x10, 0x51, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x4f, 0x50, 0x10, 0x52, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x5a, 0x44, 0x10, 0x53, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x43, 0x53, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x56, 0x10,
	0x55, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x45, 0x4b, 0x10, 0x56, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x47,
	0x50, 0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x4e, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x53, 0x41, 0x10, 0x59, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x42, 0x10, 0x5a, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x53, 0x50, 0x10, 0x5b, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x42, 0x10, 0x5c,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x5d, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x49, 0x4d,
	0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4a, 0x44, 0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x46,
	0x4b, 0x50, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x46, 0x10, 0x61, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x42, 0x50, 0x10, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x4b, 0x10, 0x63, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x4c, 0x10, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x43, 0x10,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x53, 0x10, 0x66, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49,
	0x50, 0x10, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4d, 0x44, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x4e, 0x46, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4e, 0x53, 0x10, 0x6a, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x51, 0x45, 0x10, 0x6b, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x52, 0x44, 0x10, 0x6c,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x51, 0x10, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x57, 0x45,
	0x10, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x57, 0x50, 0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x59, 0x44, 0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10, 0x71, 0x12, 0x07, 0x0a,
	0x03, 0x48, 0x4e, 0x4c, 0x10, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x44, 0x10, 0x73, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x52, 0x4b, 0x10, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x54, 0x47, 0x10,
	0x75, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x76, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x44,
	0x52, 0x10, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x45, 0x50, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4c, 0x50, 0x10, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4c, 0x52, 0x10, 0x7a, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x4c, 0x53, 0x10, 0x7b, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x7c,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x51, 0x44, 0x10, 0x7d, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x52,
	0x10, 0x7e, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4a, 0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x49,
	0x53, 0x4b, 0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x49, 0x54, 0x4c, 0x10, 0x81, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4a, 0x4d, 0x44, 0x10, 0x82, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4a, 0x4f, 0x44,
	0x10, 0x83, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x84, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4b, 0x45, 0x53, 0x10, 0x85, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x10, 0x86,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x48, 0x52, 0x10, 0x87, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b,
	0x4d, 0x46, 0x10, 0x88, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x50, 0x57, 0x10, 0x89, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4b, 0x52, 0x48, 0x10, 0x8a, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x52, 0x4f,
	0x10, 0x8b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x52, 0x57, 0x10, 0x8c, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4b, 0x57, 0x44, 0x10, 0x8d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x59, 0x44, 0x10, 0x8e,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x5a, 0x54, 0x10, 0x8f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c,
	0x41, 0x4b, 0x10, 0x90, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x42, 0x50, 0x10, 0x91, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4c, 0x4b, 0x52, 0x10, 0x92, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x52, 0x44,
	0x10, 0x93, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x53, 0x4c, 0x10, 0x94, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4c, 0x54, 0x4c, 0x10, 0x95, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x54, 0x54, 0x10, 0x96,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x55, 0x43, 0x10, 0x97, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c,
	0x55, 0x46, 0x10, 0x98, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x55, 0x4c, 0x10, 0x99, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4c, 0x56, 0x4c, 0x10, 0x9a, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x56, 0x52,
	0x10, 0x9b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x59, 0x44, 0x10, 0x9c, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x41, 0x44, 0x10, 0x9d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x41, 0x46, 0x10, 0x9e,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x43, 0x46, 0x10, 0x9f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d,
	0x44, 0x43, 0x10, 0xa0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x44, 0x4c, 0x10, 0xa1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4d, 0x47, 0x41, 0x10, 0xa2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x47, 0x46,
	0x10, 0xa3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4b, 0x44, 0x10, 0xa4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x4b, 0x4e, 0x10, 0xa5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4c, 0x46, 0x10, 0xa6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4d, 0x4b, 0x10, 0xa7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d,
	0x4e, 0x54, 0x10, 0xa8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4f, 0x50, 0x10, 0xa9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4d, 0x52, 0x4f, 0x10, 0xaa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x54, 0x4c,
	0x10, 0xab, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x54, 0x50, 0x10, 0xac, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x55, 0x52, 0x10, 0xad, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x56, 0x50, 0x10, 0xae,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x56, 0x52, 0x10, 0xaf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d,
	0x57, 0x4b, 0x10, 0xb0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x58, 0x4e, 0x10, 0xb1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4d, 0x58, 0x50, 0x10, 0xb2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x58, 0x56,
	0x10, 0xb3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x59, 0x52, 0x10, 0xb4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x5a, 0x45, 0x10, 0xb5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x5a, 0x4d, 0x10, 0xb6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x5a, 0x4e, 0x10, 0xb7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e,
	0x41, 0x44, 0x10, 0xb8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x47, 0x4e, 0x10, 0xb9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x10, 0xba, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x49, 0x4f,
	0x10, 0xbb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x4c, 0x47, 0x10, 0xbc, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4e, 0x4f, 0x4b, 0x10, 0xbd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x50, 0x52, 0x10, 0xbe,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x5a, 0x44, 0x10, 0xbf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4f,
	0x4d, 0x52, 0x10, 0xc0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x41, 0x42, 0x10, 0xc1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x50, 0x45, 0x49, 0x10, 0xc2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x45, 0x4e,
	0x10, 0xc3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x45, 0x53, 0x10, 0xc4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x50, 0x47, 0x4b, 0x10, 0xc5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x48, 0x50, 0x10, 0xc6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x4b, 0x52, 0x10, 0xc7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50,
	0x4c, 0x4e, 0x10, 0xc8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x4c, 0x5a, 0x10, 0xc9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x50, 0x54, 0x45, 0x10, 0xca, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x59, 0x47,
	0x10, 0xcb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x51, 0x41, 0x52, 0x10, 0xcc, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x52, 0x48, 0x44, 0x10, 0xcd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x4f, 0x4c, 0x10, 0xce,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x4f, 0x4e, 0x10, 0xcf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52,
	0x53, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x55, 0x42, 0x10, 0xd1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x52, 0x55, 0x52, 0x10, 0xd2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x57, 0x46,
	0x10, 0xd3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x10, 0xd4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x42, 0x44, 0x10, 0xd5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x43, 0x52, 0x10, 0xd6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x44, 0x44, 0x10, 0xd7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x44, 0x47, 0x10, 0xd8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x44, 0x50, 0x10, 0xd9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x53, 0x45, 0x4b, 0x10, 0xda, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x47, 0x44,
	0x10, 0xdb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x48, 0x50, 0x10, 0xdc, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x49, 0x54, 0x10, 0xdd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4b, 0x4b, 0x10, 0xde,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c, 0x4c, 0x10, 0xdf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x4f, 0x53, 0x10, 0xe0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x52, 0x44, 0x10, 0xe1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x53, 0x52, 0x47, 0x10, 0xe2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x53, 0x50,
	0x10, 0xe3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x54, 0x44, 0x10, 0xe4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x54, 0x4e, 0x10, 0xe5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x55, 0x52, 0x10, 0xe6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x56, 0x43, 0x10, 0xe7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x59, 0x50, 0x10, 0xe8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x5a, 0x4c, 0x10, 0xe9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x54, 0x48, 0x42, 0x10, 0xea, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4a, 0x52,
	0x10, 0xeb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4a, 0x53, 0x10, 0xec, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x54, 0x4d, 0x4d, 0x10, 0xed, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4d, 0x54, 0x10, 0xee,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x10, 0xef, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54,
	0x4f, 0x50, 0x10, 0xf0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x50, 0x45, 0x10, 0xf1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x54, 0x52, 0x4c, 0x10, 0xf2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x52, 0x59,
	0x10, 0xf3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x54, 0x44, 0x10, 0xf4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x54, 0x57, 0x44, 0x10, 0xf5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x5a, 0x53, 0x10, 0xf6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x41, 0x48, 0x10, 0xf7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55,
	0x41, 0x4b, 0x10, 0xf8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x47, 0x53, 0x10, 0xf9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x55, 0x47, 0x58, 0x10, 0xfa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x44,
	0x10, 0xfb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x4e, 0x10, 0xfc, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x55, 0x53, 0x53, 0x10, 0xfd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x59, 0x49, 0x10, 0xfe,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x59, 0x50, 0x10, 0xff, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55,
	0x59, 0x55, 0x10, 0x80, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x5a, 0x53, 0x10, 0x81, 0x02, 0x12,
	0x08, 0x0a, 0x03, 0x56, 0x45, 0x42, 0x10, 0x82, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x45, 0x46,
	0x10, 0x83, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x4e, 0x44, 0x10, 0x84, 0x02, 0x12, 0x08, 0x0a,
	0x03, 0x56, 0x4e, 0x4e, 0x10, 0x85, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x55, 0x56, 0x10, 0x86,
	0x02, 0x12, 0x08, 0x0a, 0x03, 0x57, 0x53, 0x54, 0x10, 0x87, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58,
	0x41, 0x46, 0x10, 0x88, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x41, 0x47, 0x10, 0x89, 0x02, 0x12,
	0x08, 0x0a, 0x03, 0x58, 0x41, 0x55, 0x10, 0x8a, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x42, 0x41,
	0x10, 0x8b, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x42, 0x42, 0x10, 0x8c, 0x02, 0x12, 0x08, 0x0a,
	0x03, 0x58, 0x42, 0x43, 0x10, 0x8d, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x42, 0x44, 0x10, 0x8e,
	0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x43, 0x44, 0x10, 0x8f, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58,
	0x44, 0x52, 0x10, 0x90, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x45, 0x55, 0x10, 0x91, 0x02, 0x12,
	0x08, 0x0a, 0x03, 0x58, 0x46, 0x4f, 0x10, 0x92, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x46, 0x55,
	0x10, 0x93, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x4f, 0x46, 0x10, 0x94, 0x02, 0x12, 0x08, 0x0a,
	0x03, 0x58, 0x50, 0x44, 0x10, 0x95, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x50, 0x46, 0x10, 0x96,
	0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x50, 0x54, 0x10, 0x97, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58,
	0x52, 0x45, 0x10, 0x98, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x53, 0x55, 0x10, 0x99, 0x02, 0x12,
	0x08, 0x0a, 0x03, 0x58, 0x54, 0x53, 0x10, 0x9a, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x55, 0x41,
	0x10, 0x9b, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x58, 0x58, 0x10, 0x9c, 0x02, 0x12, 0x08, 0x0a,
	0x03, 0x59, 0x44, 0x44, 0x10, 0x9d, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x59, 0x45, 0x52, 0x10, 0x9e,
	0x02, 0x12, 0x08, 0x0a, 0x03, 0x59, 0x55, 0x44, 0x10, 0x9f, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x59,
	0x55, 0x4d, 0x10, 0xa0, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x59, 0x55, 0x4e, 0x10, 0xa1, 0x02, 0x12,
	0x08, 0x0a, 0x03, 0x59, 0x55, 0x52, 0x10, 0xa2, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x41, 0x4c,
	0x10, 0xa3, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x41, 0x52, 0x10, 0xa4, 0x02, 0x12, 0x08, 0x0a,
	0x03, 0x5a, 0x4d, 0x4b, 0x10, 0xa5, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x4d, 0x57, 0x10, 0xa6,
	0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x52, 0x4e, 0x10, 0xa7, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a,
	0x52, 0x5a, 0x10, 0xa8, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x57, 0x44, 0x10, 0xa9, 0x02, 0x12,
	0x08, 0x0a, 0x03, 0x5a, 0x57, 0x4c, 0x10, 0xaa, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x57, 0x52,
	0x10, 0xab, 0x02, 0x2a, 0x36, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x05, 0x0a, 0x01, 0x59, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x02, 0x12, 0x05, 0x0a,
	0x01, 0x46, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x57, 0x10, 0x04, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x2e, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_protobuf_search_v3_results_proto_rawDescOnce sync.Once
	file_protobuf_search_v3_results_proto_rawDescData = file_protobuf_search_v3_results_proto_rawDesc
)

func file_protobuf_search_v3_results_proto_rawDescGZIP() []byte {
	file_protobuf_search_v3_results_proto_rawDescOnce.Do(func() {
		file_protobuf_search_v3_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_search_v3_results_proto_rawDescData)
	})
	return file_protobuf_search_v3_results_proto_rawDescData
}

var file_protobuf_search_v3_results_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_protobuf_search_v3_results_proto_msgTypes = make([]protoimpl.MessageInfo, 141)
var file_protobuf_search_v3_results_proto_goTypes = []interface{}{
	(TermSource)(0),                        // 0: search_v3.TermSource
	(EquipmentType)(0),                     // 1: search_v3.EquipmentType
	(SourceKind)(0),                        // 2: search_v3.SourceKind
	(Order)(0),                             // 3: search_v3.Order
	(Brand)(0),                             // 4: search_v3.Brand
	(Currency)(0),                          // 5: search_v3.Currency
	(TripClass)(0),                         // 6: search_v3.TripClass
	(*SearchResults)(nil),                  // 7: search_v3.SearchResults
	(*Chunk)(nil),                          // 8: search_v3.Chunk
	(*DebugInfo)(nil),                      // 9: search_v3.DebugInfo
	(*GateDebugInfo)(nil),                  // 10: search_v3.GateDebugInfo
	(*AgentDebugInfo)(nil),                 // 11: search_v3.AgentDebugInfo
	(*Proposals)(nil),                      // 12: search_v3.Proposals
	(*Proposal)(nil),                       // 13: search_v3.Proposal
	(*AcceptedCard)(nil),                   // 14: search_v3.AcceptedCard
	(*Cashback)(nil),                       // 15: search_v3.Cashback
	(*Fare)(nil),                           // 16: search_v3.Fare
	(*Baggage)(nil),                        // 17: search_v3.Baggage
	(*TariffInfo)(nil),                     // 18: search_v3.TariffInfo
	(*ProposalOptions)(nil),                // 19: search_v3.ProposalOptions
	(*Hotel)(nil),                          // 20: search_v3.Hotel
	(*TransferTerms)(nil),                  // 21: search_v3.TransferTerms
	(*TransferTerm)(nil),                   // 22: search_v3.TransferTerm
	(*FlightTerm)(nil),                     // 23: search_v3.FlightTerm
	(*MergedTermsInfo)(nil),                // 24: search_v3.MergedTermsInfo
	(*TariffMergeInfo)(nil),                // 25: search_v3.TariffMergeInfo
	(*TariffMergeParams)(nil),              // 26: search_v3.TariffMergeParams
	(*BaggageMergeInfo)(nil),               // 27: search_v3.BaggageMergeInfo
	(*BaggageMergeParams)(nil),             // 28: search_v3.BaggageMergeParams
	(*AdditionalTariffInfo)(nil),           // 29: search_v3.AdditionalTariffInfo
	(*FlightDesignator)(nil),               // 30: search_v3.FlightDesignator
	(*Amount)(nil),                         // 31: search_v3.Amount
	(*ProposalDebugInfo)(nil),              // 32: search_v3.ProposalDebugInfo
	(*FlightTermDebugInfo)(nil),            // 33: search_v3.FlightTermDebugInfo
	(*TechnicalStop)(nil),                  // 34: search_v3.TechnicalStop
	(*CashbackDebugInfo)(nil),              // 35: search_v3.CashbackDebugInfo
	(*Ticket)(nil),                         // 36: search_v3.Ticket
	(*FareProposals)(nil),                  // 37: search_v3.FareProposals
	(*FareProposal)(nil),                   // 38: search_v3.FareProposal
	(*BadgeInfo)(nil),                      // 39: search_v3.BadgeInfo
	(*BadgeInfoMeta)(nil),                  // 40: search_v3.BadgeInfoMeta
	(*Colors)(nil),                         // 41: search_v3.Colors
	(*Segment)(nil),                        // 42: search_v3.Segment
	(*Transfer)(nil),                       // 43: search_v3.Transfer
	(*VisaRules)(nil),                      // 44: search_v3.VisaRules
	(*SoftResponse)(nil),                   // 45: search_v3.SoftResponse
	(*DirectFlights)(nil),                  // 46: search_v3.DirectFlights
	(*ScheduleList)(nil),                   // 47: search_v3.ScheduleList
	(*Schedule)(nil),                       // 48: search_v3.Schedule
	(*FlightLeg)(nil),                      // 49: search_v3.FlightLeg
	(*AirlineInfo)(nil),                    // 50: search_v3.AirlineInfo
	(*MapStringString)(nil),                // 51: search_v3.MapStringString
	(*Places)(nil),                         // 52: search_v3.Places
	(*AirportInfo)(nil),                    // 53: search_v3.AirportInfo
	(*GeoPoint)(nil),                       // 54: search_v3.GeoPoint
	(*OptBool)(nil),                        // 55: search_v3.OptBool
	(*CityInfo)(nil),                       // 56: search_v3.CityInfo
	(*CountryInfo)(nil),                    // 57: search_v3.CountryInfo
	(*MetroAreaInfo)(nil),                  // 58: search_v3.MetroAreaInfo
	(*AgentInfo)(nil),                      // 59: search_v3.AgentInfo
	(*Alliance)(nil),                       // 60: search_v3.Alliance
	(*Equipment)(nil),                      // 61: search_v3.Equipment
	(*SearchParams)(nil),                   // 62: search_v3.SearchParams
	(*Passengers)(nil),                     // 63: search_v3.Passengers
	(*DegradedBoundaries)(nil),             // 64: search_v3.DegradedBoundaries
	(*FilterPrice)(nil),                    // 65: search_v3.FilterPrice
	(*FilterBool)(nil),                     // 66: search_v3.FilterBool
	(*DegradedAirportsBoundaries)(nil),     // 67: search_v3.DegradedAirportsBoundaries
	(*FilterBaggageBoundaries)(nil),        // 68: search_v3.FilterBaggageBoundaries
	(*BaggageBoundaries)(nil),              // 69: search_v3.BaggageBoundaries
	(*PriceBoundaries)(nil),                // 70: search_v3.PriceBoundaries
	(*DegradedTimeBoundaries)(nil),         // 71: search_v3.DegradedTimeBoundaries
	(*DateTimeRangeBoundaries)(nil),        // 72: search_v3.DateTimeRangeBoundaries
	(*RangeBoundaries)(nil),                // 73: search_v3.RangeBoundaries
	(*DegradedReturnTicketBoundaries)(nil), // 74: search_v3.DegradedReturnTicketBoundaries
	(*TransferDurationBoundaries)(nil),     // 75: search_v3.TransferDurationBoundaries
	(*Boundaries)(nil),                     // 76: search_v3.Boundaries
	(*ReturnBoundaries)(nil),               // 77: search_v3.ReturnBoundaries
	(*ChangeBoundaries)(nil),               // 78: search_v3.ChangeBoundaries
	(*AirportsBoundaries)(nil),             // 79: search_v3.AirportsBoundaries
	(*TimeBoundaries)(nil),                 // 80: search_v3.TimeBoundaries
	(*ResultsMeta)(nil),                    // 81: search_v3.ResultsMeta
	(*FilterState)(nil),                    // 82: search_v3.FilterState
	(*TimeBuckets)(nil),                    // 83: search_v3.TimeBuckets
	(*SegmentFilter)(nil),                  // 84: search_v3.SegmentFilter
	(*DateTimeOrTimeRange)(nil),            // 85: search_v3.DateTimeOrTimeRange
	(*DateTimeRange)(nil),                  // 86: search_v3.DateTimeRange
	(*Range)(nil),                          // 87: search_v3.Range
	(*FloatRange)(nil),                     // 88: search_v3.FloatRange
	nil,                                    // 89: search_v3.Chunk.BrandTicketsEntry
	nil,                                    // 90: search_v3.Chunk.AirlinesEntry
	nil,                                    // 91: search_v3.Chunk.AgentsEntry
	nil,                                    // 92: search_v3.Chunk.AlliancesEntry
	nil,                                    // 93: search_v3.Chunk.EquipmentsEntry
	nil,                                    // 94: search_v3.DebugInfo.GatesEntry
	nil,                                    // 95: search_v3.GateDebugInfo.AgentsEntry
	nil,                                    // 96: search_v3.AgentDebugInfo.ProposalsEntry
	nil,                                    // 97: search_v3.AgentDebugInfo.BadProposalsEntry
	nil,                                    // 98: search_v3.AgentDebugInfo.FilteredProposalsEntry
	nil,                                    // 99: search_v3.AgentDebugInfo.MergedFlightTermsSourcesEntry
	nil,                                    // 100: search_v3.Proposal.FlightTermsEntry
	nil,                                    // 101: search_v3.FlightTerm.MergedFromOtherProposalsEntry
	nil,                                    // 102: search_v3.ProposalDebugInfo.FlightTermsEntry
	nil,                                    // 103: search_v3.Ticket.ExtraFaresEntry
	nil,                                    // 104: search_v3.BadgeInfoMeta.NameEntry
	nil,                                    // 105: search_v3.AirlineInfo.NameEntry
	nil,                                    // 106: search_v3.MapStringString.MapEntry
	nil,                                    // 107: search_v3.Places.AirportsEntry
	nil,                                    // 108: search_v3.Places.CitiesEntry
	nil,                                    // 109: search_v3.Places.CountriesEntry
	nil,                                    // 110: search_v3.Places.MetroAreasEntry
	nil,                                    // 111: search_v3.Places.AirportsToMetroEntry
	nil,                                    // 112: search_v3.AirportInfo.NameEntry
	nil,                                    // 113: search_v3.CityInfo.NameEntry
	nil,                                    // 114: search_v3.CountryInfo.NameEntry
	nil,                                    // 115: search_v3.AgentInfo.LabelEntry
	nil,                                    // 116: search_v3.SearchParams.ExperimentsEntry
	nil,                                    // 117: search_v3.DegradedBoundaries.AgentsEntry
	nil,                                    // 118: search_v3.DegradedBoundaries.AirlinesEntry
	nil,                                    // 119: search_v3.DegradedBoundaries.AlliancesEntry
	nil,                                    // 120: search_v3.DegradedBoundaries.AirportsEntry
	nil,                                    // 121: search_v3.DegradedBoundaries.SameDepartureArrivalAirportEntry
	nil,                                    // 122: search_v3.DegradedBoundaries.EquipmentsEntry
	nil,                                    // 123: search_v3.DegradedBoundaries.PaymentMethodsEntry
	nil,                                    // 124: search_v3.DegradedBoundaries.DepartureArrivalTimeEntry
	nil,                                    // 125: search_v3.DegradedBoundaries.TransfersCountEntry
	nil,                                    // 126: search_v3.DegradedBoundaries.TransfersAirportsEntry
	nil,                                    // 127: search_v3.DegradedBoundaries.TransfersCountriesEntry
	nil,                                    // 128: search_v3.DegradedAirportsBoundaries.ArrivalEntry
	nil,                                    // 129: search_v3.DegradedAirportsBoundaries.DepartureEntry
	nil,                                    // 130: search_v3.DegradedTimeBoundaries.ArrivalDateEntry
	nil,                                    // 131: search_v3.DateTimeRangeBoundaries.BucketsEntry
	nil,                                    // 132: search_v3.RangeBoundaries.BucketsEntry
	nil,                                    // 133: search_v3.Boundaries.AgentsEntry
	nil,                                    // 134: search_v3.Boundaries.AirlinesEntry
	nil,                                    // 135: search_v3.Boundaries.AlliancesEntry
	nil,                                    // 136: search_v3.Boundaries.AirportsEntry
	nil,                                    // 137: search_v3.Boundaries.SameDepartureArrivalAirportEntry
	nil,                                    // 138: search_v3.Boundaries.EquipmentsEntry
	nil,                                    // 139: search_v3.Boundaries.PaymentMethodsEntry
	nil,                                    // 140: search_v3.Boundaries.DepartureArrivalTimeEntry
	nil,                                    // 141: search_v3.Boundaries.TransfersCountEntry
	nil,                                    // 142: search_v3.Boundaries.TransfersAirportsEntry
	nil,                                    // 143: search_v3.Boundaries.TransfersCountriesEntry
	nil,                                    // 144: search_v3.AirportsBoundaries.ArrivalEntry
	nil,                                    // 145: search_v3.AirportsBoundaries.DepartureEntry
	nil,                                    // 146: search_v3.TimeBoundaries.ArrivalDateEntry
	nil,                                    // 147: search_v3.FilterState.SegmentsEntry
}
var file_protobuf_search_v3_results_proto_depIdxs = []int32{
	8,   // 0: search_v3.SearchResults.chunks:type_name -> search_v3.Chunk
	9,   // 1: search_v3.Chunk.debug_info:type_name -> search_v3.DebugInfo
	36,  // 2: search_v3.Chunk.tickets:type_name -> search_v3.Ticket
	45,  // 3: search_v3.Chunk.soft_tickets:type_name -> search_v3.SoftResponse
	36,  // 4: search_v3.Chunk.brand_ticket:type_name -> search_v3.Ticket
	89,  // 5: search_v3.Chunk.brand_tickets:type_name -> search_v3.Chunk.BrandTicketsEntry
	36,  // 6: search_v3.Chunk.cheapest_ticket:type_name -> search_v3.Ticket
	36,  // 7: search_v3.Chunk.filtered_cheapest_ticket:type_name -> search_v3.Ticket
	36,  // 8: search_v3.Chunk.cheapest_ticket_without_airport_precheck:type_name -> search_v3.Ticket
	46,  // 9: search_v3.Chunk.direct_flights:type_name -> search_v3.DirectFlights
	49,  // 10: search_v3.Chunk.flight_legs:type_name -> search_v3.FlightLeg
	90,  // 11: search_v3.Chunk.airlines:type_name -> search_v3.Chunk.AirlinesEntry
	52,  // 12: search_v3.Chunk.places:type_name -> search_v3.Places
	91,  // 13: search_v3.Chunk.agents:type_name -> search_v3.Chunk.AgentsEntry
	92,  // 14: search_v3.Chunk.alliances:type_name -> search_v3.Chunk.AlliancesEntry
	93,  // 15: search_v3.Chunk.equipments:type_name -> search_v3.Chunk.EquipmentsEntry
	62,  // 16: search_v3.Chunk.search_params:type_name -> search_v3.SearchParams
	64,  // 17: search_v3.Chunk.degraded_filter_boundaries:type_name -> search_v3.DegradedBoundaries
	76,  // 18: search_v3.Chunk.filter_boundaries:type_name -> search_v3.Boundaries
	81,  // 19: search_v3.Chunk.meta:type_name -> search_v3.ResultsMeta
	82,  // 20: search_v3.Chunk.filter_state:type_name -> search_v3.FilterState
	3,   // 21: search_v3.Chunk.order:type_name -> search_v3.Order
	4,   // 22: search_v3.Chunk.brand:type_name -> search_v3.Brand
	94,  // 23: search_v3.DebugInfo.gates:type_name -> search_v3.DebugInfo.GatesEntry
	95,  // 24: search_v3.GateDebugInfo.agents:type_name -> search_v3.GateDebugInfo.AgentsEntry
	96,  // 25: search_v3.AgentDebugInfo.proposals:type_name -> search_v3.AgentDebugInfo.ProposalsEntry
	97,  // 26: search_v3.AgentDebugInfo.bad_proposals:type_name -> search_v3.AgentDebugInfo.BadProposalsEntry
	98,  // 27: search_v3.AgentDebugInfo.filtered_proposals:type_name -> search_v3.AgentDebugInfo.FilteredProposalsEntry
	99,  // 28: search_v3.AgentDebugInfo.merged_flight_terms_sources:type_name -> search_v3.AgentDebugInfo.MergedFlightTermsSourcesEntry
	13,  // 29: search_v3.Proposals.proposals:type_name -> search_v3.Proposal
	31,  // 30: search_v3.Proposal.price:type_name -> search_v3.Amount
	31,  // 31: search_v3.Proposal.price_per_person:type_name -> search_v3.Amount
	100, // 32: search_v3.Proposal.flight_terms:type_name -> search_v3.Proposal.FlightTermsEntry
	21,  // 33: search_v3.Proposal.transfer_terms:type_name -> search_v3.TransferTerms
	31,  // 34: search_v3.Proposal.unified_price:type_name -> search_v3.Amount
	19,  // 35: search_v3.Proposal.options:type_name -> search_v3.ProposalOptions
	16,  // 36: search_v3.Proposal.minimum_fare:type_name -> search_v3.Fare
	15,  // 37: search_v3.Proposal.cashback:type_name -> search_v3.Cashback
	15,  // 38: search_v3.Proposal.cashback_per_person:type_name -> search_v3.Cashback
	14,  // 39: search_v3.Proposal.accepted_cards:type_name -> search_v3.AcceptedCard
	31,  // 40: search_v3.Cashback.localized_amount:type_name -> search_v3.Amount
	17,  // 41: search_v3.Fare.baggage:type_name -> search_v3.Baggage
	17,  // 42: search_v3.Fare.handbags:type_name -> search_v3.Baggage
	18,  // 43: search_v3.Fare.return_before_flight:type_name -> search_v3.TariffInfo
	18,  // 44: search_v3.Fare.return_after_flight:type_name -> search_v3.TariffInfo
	18,  // 45: search_v3.Fare.change_before_flight:type_name -> search_v3.TariffInfo
	18,  // 46: search_v3.Fare.change_after_flight:type_name -> search_v3.TariffInfo
	18,  // 47: search_v3.Fare.seat_at_purchase:type_name -> search_v3.TariffInfo
	18,  // 48: search_v3.Fare.seat_at_registration:type_name -> search_v3.TariffInfo
	31,  // 49: search_v3.TariffInfo.penalty:type_name -> search_v3.Amount
	20,  // 50: search_v3.ProposalOptions.hotel:type_name -> search_v3.Hotel
	22,  // 51: search_v3.TransferTerms.terms:type_name -> search_v3.TransferTerm
	6,   // 52: search_v3.FlightTerm.trip_class:type_name -> search_v3.TripClass
	30,  // 53: search_v3.FlightTerm.marketing_carrier_designator:type_name -> search_v3.FlightDesignator
	17,  // 54: search_v3.FlightTerm.baggage:type_name -> search_v3.Baggage
	17,  // 55: search_v3.FlightTerm.handbags:type_name -> search_v3.Baggage
	29,  // 56: search_v3.FlightTerm.additional_tariff_info:type_name -> search_v3.AdditionalTariffInfo
	24,  // 57: search_v3.FlightTerm.merged_terms_info:type_name -> search_v3.MergedTermsInfo
	101, // 58: search_v3.FlightTerm.merged_from_other_proposals:type_name -> search_v3.FlightTerm.MergedFromOtherProposalsEntry
	25,  // 59: search_v3.MergedTermsInfo.seat_at_registration:type_name -> search_v3.TariffMergeInfo
	25,  // 60: search_v3.MergedTermsInfo.seat_at_purchase:type_name -> search_v3.TariffMergeInfo
	25,  // 61: search_v3.MergedTermsInfo.return_before_flight:type_name -> search_v3.TariffMergeInfo
	25,  // 62: search_v3.MergedTermsInfo.return_after_flight:type_name -> search_v3.TariffMergeInfo
	25,  // 63: search_v3.MergedTermsInfo.change_before_flight:type_name -> search_v3.TariffMergeInfo
	25,  // 64: search_v3.MergedTermsInfo.change_after_flight:type_name -> search_v3.TariffMergeInfo
	27,  // 65: search_v3.MergedTermsInfo.baggage:type_name -> search_v3.BaggageMergeInfo
	27,  // 66: search_v3.MergedTermsInfo.handbags:type_name -> search_v3.BaggageMergeInfo
	26,  // 67: search_v3.TariffMergeInfo.is_from_config:type_name -> search_v3.TariffMergeParams
	26,  // 68: search_v3.TariffMergeInfo.mismatch:type_name -> search_v3.TariffMergeParams
	28,  // 69: search_v3.BaggageMergeInfo.is_from_config:type_name -> search_v3.BaggageMergeParams
	28,  // 70: search_v3.BaggageMergeInfo.mismatch:type_name -> search_v3.BaggageMergeParams
	18,  // 71: search_v3.AdditionalTariffInfo.seat_at_purchase_info:type_name -> search_v3.TariffInfo
	18,  // 72: search_v3.AdditionalTariffInfo.seat_at_registration_info:type_name -> search_v3.TariffInfo
	18,  // 73: search_v3.AdditionalTariffInfo.return_before_flight:type_name -> search_v3.TariffInfo
	18,  // 74: search_v3.AdditionalTariffInfo.return_after_flight:type_name -> search_v3.TariffInfo
	18,  // 75: search_v3.AdditionalTariffInfo.change_before_flight:type_name -> search_v3.TariffInfo
	18,  // 76: search_v3.AdditionalTariffInfo.change_after_flight:type_name -> search_v3.TariffInfo
	5,   // 77: search_v3.Amount.currency_code:type_name -> search_v3.Currency
	31,  // 78: search_v3.ProposalDebugInfo.agency_price:type_name -> search_v3.Amount
	102, // 79: search_v3.ProposalDebugInfo.flight_terms:type_name -> search_v3.ProposalDebugInfo.FlightTermsEntry
	35,  // 80: search_v3.ProposalDebugInfo.cashback:type_name -> search_v3.CashbackDebugInfo
	0,   // 81: search_v3.FlightTermDebugInfo.baggage_source:type_name -> search_v3.TermSource
	0,   // 82: search_v3.FlightTermDebugInfo.handbags_source:type_name -> search_v3.TermSource
	34,  // 83: search_v3.FlightTermDebugInfo.gate_technical_stops:type_name -> search_v3.TechnicalStop
	31,  // 84: search_v3.CashbackDebugInfo.amount:type_name -> search_v3.Amount
	31,  // 85: search_v3.CashbackDebugInfo.localized_amount:type_name -> search_v3.Amount
	42,  // 86: search_v3.Ticket.segments:type_name -> search_v3.Segment
	13,  // 87: search_v3.Ticket.proposals:type_name -> search_v3.Proposal
	39,  // 88: search_v3.Ticket.badges:type_name -> search_v3.BadgeInfo
	103, // 89: search_v3.Ticket.extra_fares:type_name -> search_v3.Ticket.ExtraFaresEntry
	38,  // 90: search_v3.FareProposals.proposals:type_name -> search_v3.FareProposal
	40,  // 91: search_v3.BadgeInfo.meta:type_name -> search_v3.BadgeInfoMeta
	104, // 92: search_v3.BadgeInfoMeta.name:type_name -> search_v3.BadgeInfoMeta.NameEntry
	41,  // 93: search_v3.BadgeInfoMeta.colors:type_name -> search_v3.Colors
	43,  // 94: search_v3.Segment.transfers:type_name -> search_v3.Transfer
	44,  // 95: search_v3.Transfer.visa_rules:type_name -> search_v3.VisaRules
	36,  // 96: search_v3.SoftResponse.tickets:type_name -> search_v3.Ticket
	36,  // 97: search_v3.DirectFlights.cheapest_ticket:type_name -> search_v3.Ticket
	47,  // 98: search_v3.DirectFlights.schedule:type_name -> search_v3.ScheduleList
	48,  // 99: search_v3.ScheduleList.list:type_name -> search_v3.Schedule
	30,  // 100: search_v3.FlightLeg.operating_carrier_designator:type_name -> search_v3.FlightDesignator
	61,  // 101: search_v3.FlightLeg.equipment:type_name -> search_v3.Equipment
	34,  // 102: search_v3.FlightLeg.technical_stops:type_name -> search_v3.TechnicalStop
	105, // 103: search_v3.AirlineInfo.name:type_name -> search_v3.AirlineInfo.NameEntry
	106, // 104: search_v3.MapStringString.map:type_name -> search_v3.MapStringString.MapEntry
	107, // 105: search_v3.Places.airports:type_name -> search_v3.Places.AirportsEntry
	108, // 106: search_v3.Places.cities:type_name -> search_v3.Places.CitiesEntry
	109, // 107: search_v3.Places.countries:type_name -> search_v3.Places.CountriesEntry
	110, // 108: search_v3.Places.metro_areas:type_name -> search_v3.Places.MetroAreasEntry
	111, // 109: search_v3.Places.airports_to_metro:type_name -> search_v3.Places.AirportsToMetroEntry
	112, // 110: search_v3.AirportInfo.name:type_name -> search_v3.AirportInfo.NameEntry
	54,  // 111: search_v3.AirportInfo.coordinates:type_name -> search_v3.GeoPoint
	55,  // 112: search_v3.AirportInfo.has_transit_zone:type_name -> search_v3.OptBool
	113, // 113: search_v3.CityInfo.name:type_name -> search_v3.CityInfo.NameEntry
	114, // 114: search_v3.CountryInfo.name:type_name -> search_v3.CountryInfo.NameEntry
	115, // 115: search_v3.AgentInfo.label:type_name -> search_v3.AgentInfo.LabelEntry
	1,   // 116: search_v3.Equipment.type:type_name -> search_v3.EquipmentType
	63,  // 117: search_v3.SearchParams.passengers:type_name -> search_v3.Passengers
	6,   // 118: search_v3.SearchParams.trip_class:type_name -> search_v3.TripClass
	2,   // 119: search_v3.SearchParams.source_kind:type_name -> search_v3.SourceKind
	116, // 120: search_v3.SearchParams.experiments:type_name -> search_v3.SearchParams.ExperimentsEntry
	117, // 121: search_v3.DegradedBoundaries.agents:type_name -> search_v3.DegradedBoundaries.AgentsEntry
	118, // 122: search_v3.DegradedBoundaries.airlines:type_name -> search_v3.DegradedBoundaries.AirlinesEntry
	119, // 123: search_v3.DegradedBoundaries.alliances:type_name -> search_v3.DegradedBoundaries.AlliancesEntry
	66,  // 124: search_v3.DegradedBoundaries.has_interlines:type_name -> search_v3.FilterBool
	66,  // 125: search_v3.DegradedBoundaries.has_lowcosts:type_name -> search_v3.FilterBool
	120, // 126: search_v3.DegradedBoundaries.airports:type_name -> search_v3.DegradedBoundaries.AirportsEntry
	121, // 127: search_v3.DegradedBoundaries.same_departure_arrival_airport:type_name -> search_v3.DegradedBoundaries.SameDepartureArrivalAirportEntry
	68,  // 128: search_v3.DegradedBoundaries.baggage:type_name -> search_v3.FilterBaggageBoundaries
	122, // 129: search_v3.DegradedBoundaries.equipments:type_name -> search_v3.DegradedBoundaries.EquipmentsEntry
	123, // 130: search_v3.DegradedBoundaries.payment_methods:type_name -> search_v3.DegradedBoundaries.PaymentMethodsEntry
	70,  // 131: search_v3.DegradedBoundaries.price:type_name -> search_v3.PriceBoundaries
	124, // 132: search_v3.DegradedBoundaries.departure_arrival_time:type_name -> search_v3.DegradedBoundaries.DepartureArrivalTimeEntry
	74,  // 133: search_v3.DegradedBoundaries.return_ticket:type_name -> search_v3.DegradedReturnTicketBoundaries
	74,  // 134: search_v3.DegradedBoundaries.change_ticket:type_name -> search_v3.DegradedReturnTicketBoundaries
	125, // 135: search_v3.DegradedBoundaries.transfers_count:type_name -> search_v3.DegradedBoundaries.TransfersCountEntry
	75,  // 136: search_v3.DegradedBoundaries.transfers_duration:type_name -> search_v3.TransferDurationBoundaries
	126, // 137: search_v3.DegradedBoundaries.transfers_airports:type_name -> search_v3.DegradedBoundaries.TransfersAirportsEntry
	127, // 138: search_v3.DegradedBoundaries.transfers_countries:type_name -> search_v3.DegradedBoundaries.TransfersCountriesEntry
	66,  // 139: search_v3.DegradedBoundaries.has_transfers_with_airport_change:type_name -> search_v3.FilterBool
	66,  // 140: search_v3.DegradedBoundaries.has_transfers_with_baggage_recheck:type_name -> search_v3.FilterBool
	66,  // 141: search_v3.DegradedBoundaries.has_transfers_with_visa:type_name -> search_v3.FilterBool
	66,  // 142: search_v3.DegradedBoundaries.has_transfers_with_virtual_interline:type_name -> search_v3.FilterBool
	66,  // 143: search_v3.DegradedBoundaries.has_covid_restrictions:type_name -> search_v3.FilterBool
	66,  // 144: search_v3.DegradedBoundaries.has_night_transfers:type_name -> search_v3.FilterBool
	66,  // 145: search_v3.DegradedBoundaries.has_convenient_transfers:type_name -> search_v3.FilterBool
	66,  // 146: search_v3.DegradedBoundaries.has_short_layover_transfers:type_name -> search_v3.FilterBool
	66,  // 147: search_v3.DegradedBoundaries.has_long_layover_transfers:type_name -> search_v3.FilterBool
	128, // 148: search_v3.DegradedAirportsBoundaries.arrival:type_name -> search_v3.DegradedAirportsBoundaries.ArrivalEntry
	129, // 149: search_v3.DegradedAirportsBoundaries.departure:type_name -> search_v3.DegradedAirportsBoundaries.DepartureEntry
	65,  // 150: search_v3.FilterBaggageBoundaries.full_baggage:type_name -> search_v3.FilterPrice
	65,  // 151: search_v3.FilterBaggageBoundaries.no_baggage:type_name -> search_v3.FilterPrice
	65,  // 152: search_v3.FilterBaggageBoundaries.large_handbag:type_name -> search_v3.FilterPrice
	130, // 153: search_v3.DegradedTimeBoundaries.arrival_date:type_name -> search_v3.DegradedTimeBoundaries.ArrivalDateEntry
	72,  // 154: search_v3.DegradedTimeBoundaries.arrival_time:type_name -> search_v3.DateTimeRangeBoundaries
	72,  // 155: search_v3.DegradedTimeBoundaries.departure_time:type_name -> search_v3.DateTimeRangeBoundaries
	73,  // 156: search_v3.DegradedTimeBoundaries.trip_duration:type_name -> search_v3.RangeBoundaries
	131, // 157: search_v3.DateTimeRangeBoundaries.buckets:type_name -> search_v3.DateTimeRangeBoundaries.BucketsEntry
	132, // 158: search_v3.RangeBoundaries.buckets:type_name -> search_v3.RangeBoundaries.BucketsEntry
	65,  // 159: search_v3.DegradedReturnTicketBoundaries.available:type_name -> search_v3.FilterPrice
	65,  // 160: search_v3.DegradedReturnTicketBoundaries.free:type_name -> search_v3.FilterPrice
	133, // 161: search_v3.Boundaries.agents:type_name -> search_v3.Boundaries.AgentsEntry
	134, // 162: search_v3.Boundaries.airlines:type_name -> search_v3.Boundaries.AirlinesEntry
	135, // 163: search_v3.Boundaries.alliances:type_name -> search_v3.Boundaries.AlliancesEntry
	136, // 164: search_v3.Boundaries.airports:type_name -> search_v3.Boundaries.AirportsEntry
	137, // 165: search_v3.Boundaries.same_departure_arrival_airport:type_name -> search_v3.Boundaries.SameDepartureArrivalAirportEntry
	69,  // 166: search_v3.Boundaries.baggage:type_name -> search_v3.BaggageBoundaries
	138, // 167: search_v3.Boundaries.equipments:type_name -> search_v3.Boundaries.EquipmentsEntry
	139, // 168: search_v3.Boundaries.payment_methods:type_name -> search_v3.Boundaries.PaymentMethodsEntry
	70,  // 169: search_v3.Boundaries.price:type_name -> search_v3.PriceBoundaries
	140, // 170: search_v3.Boundaries.departure_arrival_time:type_name -> search_v3.Boundaries.DepartureArrivalTimeEntry
	77,  // 171: search_v3.Boundaries.return_ticket:type_name -> search_v3.ReturnBoundaries
	78,  // 172: search_v3.Boundaries.change_ticket:type_name -> search_v3.ChangeBoundaries
	141, // 173: search_v3.Boundaries.transfers_count:type_name -> search_v3.Boundaries.TransfersCountEntry
	75,  // 174: search_v3.Boundaries.transfers_duration:type_name -> search_v3.TransferDurationBoundaries
	142, // 175: search_v3.Boundaries.transfers_airports:type_name -> search_v3.Boundaries.TransfersAirportsEntry
	143, // 176: search_v3.Boundaries.transfers_countries:type_name -> search_v3.Boundaries.TransfersCountriesEntry
	144, // 177: search_v3.AirportsBoundaries.arrival:type_name -> search_v3.AirportsBoundaries.ArrivalEntry
	145, // 178: search_v3.AirportsBoundaries.departure:type_name -> search_v3.AirportsBoundaries.DepartureEntry
	146, // 179: search_v3.TimeBoundaries.arrival_date:type_name -> search_v3.TimeBoundaries.ArrivalDateEntry
	72,  // 180: search_v3.TimeBoundaries.arrival_time:type_name -> search_v3.DateTimeRangeBoundaries
	72,  // 181: search_v3.TimeBoundaries.departure_time:type_name -> search_v3.DateTimeRangeBoundaries
	73,  // 182: search_v3.TimeBoundaries.trip_duration:type_name -> search_v3.RangeBoundaries
	147, // 183: search_v3.FilterState.segments:type_name -> search_v3.FilterState.SegmentsEntry
	88,  // 184: search_v3.FilterState.price:type_name -> search_v3.FloatRange
	87,  // 185: search_v3.FilterState.transfers_duration:type_name -> search_v3.Range
	83,  // 186: search_v3.FilterState.time_buckets:type_name -> search_v3.TimeBuckets
	85,  // 187: search_v3.SegmentFilter.arrival_time:type_name -> search_v3.DateTimeOrTimeRange
	86,  // 188: search_v3.SegmentFilter.departure_time:type_name -> search_v3.DateTimeRange
	87,  // 189: search_v3.SegmentFilter.trip_duration:type_name -> search_v3.Range
	36,  // 190: search_v3.Chunk.BrandTicketsEntry.value:type_name -> search_v3.Ticket
	50,  // 191: search_v3.Chunk.AirlinesEntry.value:type_name -> search_v3.AirlineInfo
	59,  // 192: search_v3.Chunk.AgentsEntry.value:type_name -> search_v3.AgentInfo
	60,  // 193: search_v3.Chunk.AlliancesEntry.value:type_name -> search_v3.Alliance
	61,  // 194: search_v3.Chunk.EquipmentsEntry.value:type_name -> search_v3.Equipment
	10,  // 195: search_v3.DebugInfo.GatesEntry.value:type_name -> search_v3.GateDebugInfo
	11,  // 196: search_v3.GateDebugInfo.AgentsEntry.value:type_name -> search_v3.AgentDebugInfo
	32,  // 197: search_v3.AgentDebugInfo.ProposalsEntry.value:type_name -> search_v3.ProposalDebugInfo
	12,  // 198: search_v3.AgentDebugInfo.FilteredProposalsEntry.value:type_name -> search_v3.Proposals
	23,  // 199: search_v3.Proposal.FlightTermsEntry.value:type_name -> search_v3.FlightTerm
	33,  // 200: search_v3.ProposalDebugInfo.FlightTermsEntry.value:type_name -> search_v3.FlightTermDebugInfo
	37,  // 201: search_v3.Ticket.ExtraFaresEntry.value:type_name -> search_v3.FareProposals
	51,  // 202: search_v3.AirlineInfo.NameEntry.value:type_name -> search_v3.MapStringString
	53,  // 203: search_v3.Places.AirportsEntry.value:type_name -> search_v3.AirportInfo
	56,  // 204: search_v3.Places.CitiesEntry.value:type_name -> search_v3.CityInfo
	57,  // 205: search_v3.Places.CountriesEntry.value:type_name -> search_v3.CountryInfo
	58,  // 206: search_v3.Places.MetroAreasEntry.value:type_name -> search_v3.MetroAreaInfo
	51,  // 207: search_v3.AirportInfo.NameEntry.value:type_name -> search_v3.MapStringString
	51,  // 208: search_v3.CityInfo.NameEntry.value:type_name -> search_v3.MapStringString
	51,  // 209: search_v3.CountryInfo.NameEntry.value:type_name -> search_v3.MapStringString
	51,  // 210: search_v3.AgentInfo.LabelEntry.value:type_name -> search_v3.MapStringString
	65,  // 211: search_v3.DegradedBoundaries.AgentsEntry.value:type_name -> search_v3.FilterPrice
	65,  // 212: search_v3.DegradedBoundaries.AirlinesEntry.value:type_name -> search_v3.FilterPrice
	65,  // 213: search_v3.DegradedBoundaries.AlliancesEntry.value:type_name -> search_v3.FilterPrice
	67,  // 214: search_v3.DegradedBoundaries.AirportsEntry.value:type_name -> search_v3.DegradedAirportsBoundaries
	65,  // 215: search_v3.DegradedBoundaries.SameDepartureArrivalAirportEntry.value:type_name -> search_v3.FilterPrice
	65,  // 216: search_v3.DegradedBoundaries.EquipmentsEntry.value:type_name -> search_v3.FilterPrice
	65,  // 217: search_v3.DegradedBoundaries.PaymentMethodsEntry.value:type_name -> search_v3.FilterPrice
	71,  // 218: search_v3.DegradedBoundaries.DepartureArrivalTimeEntry.value:type_name -> search_v3.DegradedTimeBoundaries
	65,  // 219: search_v3.DegradedBoundaries.TransfersCountEntry.value:type_name -> search_v3.FilterPrice
	65,  // 220: search_v3.DegradedBoundaries.TransfersAirportsEntry.value:type_name -> search_v3.FilterPrice
	65,  // 221: search_v3.DegradedBoundaries.TransfersCountriesEntry.value:type_name -> search_v3.FilterPrice
	65,  // 222: search_v3.DegradedAirportsBoundaries.ArrivalEntry.value:type_name -> search_v3.FilterPrice
	65,  // 223: search_v3.DegradedAirportsBoundaries.DepartureEntry.value:type_name -> search_v3.FilterPrice
	65,  // 224: search_v3.DegradedTimeBoundaries.ArrivalDateEntry.value:type_name -> search_v3.FilterPrice
	79,  // 225: search_v3.Boundaries.AirportsEntry.value:type_name -> search_v3.AirportsBoundaries
	80,  // 226: search_v3.Boundaries.DepartureArrivalTimeEntry.value:type_name -> search_v3.TimeBoundaries
	84,  // 227: search_v3.FilterState.SegmentsEntry.value:type_name -> search_v3.SegmentFilter
	228, // [228:228] is the sub-list for method output_type
	228, // [228:228] is the sub-list for method input_type
	228, // [228:228] is the sub-list for extension type_name
	228, // [228:228] is the sub-list for extension extendee
	0,   // [0:228] is the sub-list for field type_name
}

func init() { file_protobuf_search_v3_results_proto_init() }
func file_protobuf_search_v3_results_proto_init() {
	if File_protobuf_search_v3_results_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_search_v3_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GateDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cashback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Baggage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hotel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedTermsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffMergeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffMergeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaggageMergeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaggageMergeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalTariffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightDesignator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightTermDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechnicalStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashbackDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FareProposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FareProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeInfoMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Colors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisaRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectFlights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightLeg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Places); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetroAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Passengers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedAirportsBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBaggageBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaggageBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedTimeBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeRangeBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedReturnTicketBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferDurationBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirportsBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeBuckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeOrTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_search_v3_results_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_search_v3_results_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_protobuf_search_v3_results_proto_msgTypes[75].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_search_v3_results_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   141,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_search_v3_results_proto_goTypes,
		DependencyIndexes: file_protobuf_search_v3_results_proto_depIdxs,
		EnumInfos:         file_protobuf_search_v3_results_proto_enumTypes,
		MessageInfos:      file_protobuf_search_v3_results_proto_msgTypes,
	}.Build()
	File_protobuf_search_v3_results_proto = out.File
	file_protobuf_search_v3_results_proto_rawDesc = nil
	file_protobuf_search_v3_results_proto_goTypes = nil
	file_protobuf_search_v3_results_proto_depIdxs = nil
}
