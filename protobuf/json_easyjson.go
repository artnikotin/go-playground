// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package protobuf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGoPlaygroundProtobuf(in *jlexer.Lexer, out *JsonObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "price":
			out.Price = float32(in.Float32())
		case "datetime":
			if in.IsNull() {
				in.Skip()
				out.Datetime = nil
			} else {
				if out.Datetime == nil {
					out.Datetime = new(int64)
				}
				*out.Datetime = int64(in.Int64())
			}
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGoPlaygroundProtobuf(out *jwriter.Writer, in JsonObject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	if in.Price != 0 {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Price))
	}
	if in.Datetime != nil {
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Datetime))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGoPlaygroundProtobuf(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGoPlaygroundProtobuf(l, v)
}
func easyjson42239ddeDecodeGoPlaygroundProtobuf1(in *jlexer.Lexer, out *JsonLongString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payload":
			out.Payload = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGoPlaygroundProtobuf1(out *jwriter.Writer, in JsonLongString) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Payload != "" {
		const prefix string = ",\"payload\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Payload))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonLongString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGoPlaygroundProtobuf1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonLongString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGoPlaygroundProtobuf1(l, v)
}
func easyjson42239ddeDecodeGoPlaygroundProtobuf2(in *jlexer.Lexer, out *JsonLargeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*JsonObject, 0, 8)
					} else {
						out.Data = []*JsonObject{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *JsonObject
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(JsonObject)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGoPlaygroundProtobuf2(out *jwriter.Writer, in JsonLargeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonLargeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGoPlaygroundProtobuf2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonLargeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGoPlaygroundProtobuf2(l, v)
}
